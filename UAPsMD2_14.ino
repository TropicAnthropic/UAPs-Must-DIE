#include <Arduboy2.h>
#include <ArduboyTones.h>

// UAPs Must DIE!
// Version 2.14
// September 11th 2023
// Matthew Bryan

Arduboy2 arduboy;
ArduboyTones sound(arduboy.audio.enabled);
Sprites sprites;

const uint8_t PROGMEM Block1[] = {
20, 10,
0x00, 0x30, 0x30, 0x78, 0x78, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0x78, 0x78, 0x30, 0x30, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM Block1Alt[] = {
20, 10,
0x00, 0x30, 0x30, 0x78, 0x68, 0xfc, 0xf4, 0xbe, 0xfa, 0xfe, 0xfe, 0x7e, 0xfe, 0xb4, 0xfc, 0x58, 0x78, 0x30, 0x30, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM Block1Mask[] = {
0x30, 0x30, 0x78, 0x78, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0x78, 0x78, 0x30, 0x30, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM Block2[] = {
20, 11,
0x20, 0x50, 0x30, 0xb8, 0x78, 0x7c, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0x7c, 0xf8, 0x38, 0x70, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x01, 0x01, 0x03, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM Block2Mask[] = {
0x70, 0x70, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0x70, 0x70, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM Block3[] = {
20, 12,
0x60, 0x90, 0x30, 0x38, 0x78, 0x7c, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0x78, 0x78, 0xb0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x01, 0x01, 0x07, 0x07, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM Block3Mask[] = {
0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 
0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 
};
const uint8_t PROGMEM Block4[] = {
20, 13,
0xe0, 0x10, 0x30, 0x38, 0x78, 0x7c, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0x7c, 0x78, 0x38, 0xb0, 0x00, 0x00, 
0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x01, 0x01, 0x0f, 0x0f, 0x00, 0x06, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 
};
const uint8_t PROGMEM Block4Mask[] = {
0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 
0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 
};
const uint8_t PROGMEM Block5[] = {
20, 14,
0xe0, 0x10, 0x30, 0x38, 0x78, 0x7c, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0x7c, 0x78, 0x38, 0xb0, 0x00, 0x00, 
0x01, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x01, 0x01, 0x1f, 0x1f, 0x00, 0x0a, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 
};
const uint8_t PROGMEM Block5Mask[] = {
0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 
0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 
};
const uint8_t PROGMEM Block6[] = {
20, 15,
0xe0, 0x10, 0x30, 0x38, 0x78, 0x7c, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0x7c, 0xf8, 0x38, 0x70, 0x00, 0x00, 
0x03, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x01, 0x01, 0x3f, 0x3f, 0x00, 0x15, 0x00, 0x0a, 0x00, 0x05, 0x00, 0x00, 
};
const uint8_t PROGMEM Block6Mask[] = {
0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 
0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 
};
const uint8_t PROGMEM Block7[] = {
20, 16,
0xe0, 0x10, 0x30, 0x38, 0x78, 0x7c, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0x7c, 0x78, 0x38, 0xb0, 0x00, 0x00, 
0x07, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x01, 0x01, 0x7f, 0x7f, 0x00, 0x2a, 0x00, 0x15, 0x00, 0x0a, 0x00, 0x00, 
};
const uint8_t PROGMEM Block7Mask[] = {
0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 
0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 
};
const uint8_t PROGMEM Block8[] = {
20, 17,
0xe0, 0x10, 0x30, 0x38, 0x78, 0x7c, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0x7c, 0xf8, 0x38, 0x70, 0x00, 0x00, 
0x0f, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x01, 0x01, 0xff, 0xff, 0x00, 0x55, 0x00, 0x2a, 0x00, 0x15, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM Block8Mask[] = {
0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 
0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x1f, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM Block9[] = {
20, 18,
0xe0, 0x10, 0x30, 0x38, 0x78, 0x7c, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0x7c, 0x78, 0x38, 0xb0, 0x00, 0x00, 
0x1f, 0x20, 0x00, 0x40, 0x00, 0x80, 0x00, 0x00, 0x01, 0x01, 0xff, 0xff, 0x00, 0xaa, 0x00, 0x55, 0x00, 0x2a, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM Block9Mask[] = {
0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 
0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM Block10[] = {
20, 19,
0xe0, 0x10, 0x30, 0x38, 0x78, 0x7c, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0x7c, 0xf8, 0x38, 0x70, 0x00, 0x00, 
0x3f, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xff, 0xff, 0x00, 0x55, 0x00, 0xaa, 0x00, 0x55, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x03, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};


const uint8_t PROGMEM Block10Mask[] = {
0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 
0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM Block10Alt[] = {
20, 19,
0xe0, 0x10, 0xb0, 0x38, 0x78, 0x7c, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0x7c, 0xf8, 0x38, 0x70, 0x00, 0x00, 
0x3f, 0x40, 0x11, 0xa0, 0x21, 0x40, 0x44, 0x80, 0xa9, 0x01, 0xff, 0xff, 0x00, 0x55, 0x00, 0xaa, 0x00, 0x55, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x03, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM Wedge[] = {
16, 12,
0x00, 0x02, 0x0a, 0x12, 0x06, 0x4e, 0xce, 0x1e, 0x3e, 0x1e, 0x0e, 0x0e, 0x0a, 0x06, 0x02, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM wedgeMask[] = {
0x00, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x00, 0x00, 
};
const uint8_t PROGMEM WedgeLeft[] = {
16, 12,
0x04, 0x06, 0x16, 0x26, 0x0e, 0x4e, 0xde, 0x1e, 0x7e, 0xbe, 0x5e, 0xae, 0x57, 0x2f, 0x17, 0x01, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x05, 0x0a, 0x01, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM WedgeLeftMask[] = {
0x0c, 0x1e, 0x3e, 0x7e, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0x1f, 0x03, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x03, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM WedgeRight[] = {
16, 12,
0x00, 0x00, 0x02, 0x08, 0x12, 0x04, 0x4a, 0xd4, 0x0a, 0x04, 0x02, 0x04, 0x02, 0x01, 0x02, 0x01, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM WedgeRightMask[] = {
0x04, 0x0e, 0x1e, 0x3e, 0x7e, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0x3f, 0x0f, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x01, 0x00, 0x00, 
};
const uint8_t PROGMEM SHADDOW[] = {
16, 12,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM SHADDOWMask[] = {
0x00, 0x0a, 0x15, 0x2a, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0x0a, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x05, 0x0a, 0x05, 0x0a, 0x05, 0x02, 0x00, 0x00, 
};
const uint8_t PROGMEM darkenergy[] = {
8, 8,
0x00, 0x04, 0x0e, 0x44, 0x00, 0x40, 0x28, 0x00, 
};
const uint8_t PROGMEM darkenergyMask[] = {
0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c, 
};
const uint8_t PROGMEM UAP[] = {
26, 21,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xf4, 0xf4, 0xdc, 0x8c, 0xd8, 0xf0, 0xe0, 0x00, 0x00, 
0x00, 0x00, 0xfc, 0xbe, 0x3f, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x9f, 0x9f, 0xcf, 0xcf, 0x67, 0x67, 0x33, 0x33, 0x18, 0x1f, 0x07, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x03, 0x03, 0x07, 0x06, 0x07, 0x06, 0x06, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM UAPMask[] = {
0x00, 0x00, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xe0, 
0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x07, 
0x00, 0x03, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM DitherMoon64[] = {
64, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x28, 0x40, 0x80, 0x14, 0x2a, 0x50, 0x02, 0x1d, 0x40, 0x15, 0x0b, 0x44, 0x11, 0x8d, 0x22, 0x11, 0x55, 0x0a, 0x13, 0x62, 0x8a, 0x76, 0x82, 0x0c, 0x74, 0x88, 0x20, 0x98, 0x20, 0xa0, 0x20, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x20, 0x00, 0x88, 0x20, 0x02, 0x08, 0x40, 0x00, 0x1a, 0x44, 0x80, 0x11, 0x24, 0x82, 0x00, 0x28, 0x45, 0x00, 0x94, 0x41, 0x00, 0x54, 0x01, 0x08, 0xa2, 0x50, 0x04, 0x41, 0x90, 0x25, 0x8a, 0x20, 0x49, 0x92, 0x25, 0x4a, 0x29, 0x16, 0x04, 0xa9, 0x56, 0x00, 0x4a, 0x54, 0x11, 0xa7, 0x4c, 0x30, 0xcc, 0x90, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x50, 0xa4, 0x0a, 0x10, 0x42, 0x00, 0x08, 0x42, 0x00, 0x10, 0x41, 0x04, 0x10, 0x41, 0x34, 0x8a, 0x00, 0x20, 0x4a, 0x95, 0x40, 0x15, 0xaa, 0x50, 0x14, 0x4a, 0x21, 0x98, 0x42, 0x24, 0x08, 0x22, 0x89, 0x28, 0x02, 0x4a, 0x15, 0x02, 0x50, 0x45, 0x10, 0x40, 0x85, 0x50, 0x08, 0x02, 0x50, 0x05, 0x00, 0x51, 0xae, 0x54, 0x11, 0xee, 0x12, 0xb5, 0x4d, 0x32, 0xd4, 0xa0, 0x00, 0x00, 
0x00, 0xad, 0x50, 0x00, 0x2d, 0xd0, 0x00, 0x0a, 0x40, 0x01, 0x50, 0x84, 0x00, 0x29, 0x00, 0x40, 0x0a, 0x90, 0x21, 0x14, 0x82, 0x08, 0x21, 0x52, 0x84, 0x29, 0x04, 0x50, 0xa5, 0x40, 0x18, 0xe2, 0x00, 0x55, 0xaa, 0x00, 0xeb, 0x9c, 0x61, 0x94, 0x78, 0x45, 0x92, 0x6a, 0x04, 0x81, 0x50, 0x01, 0x44, 0x11, 0x00, 0xa4, 0x01, 0x48, 0x00, 0x8b, 0x56, 0x28, 0xd7, 0x00, 0x48, 0x03, 0x94, 0x20, 
0x00, 0xaa, 0x25, 0x8a, 0x38, 0x42, 0x95, 0x28, 0x51, 0xa6, 0x00, 0x02, 0xa9, 0x00, 0x05, 0x50, 0x08, 0x42, 0x10, 0x2e, 0x40, 0x00, 0x15, 0x40, 0x12, 0x05, 0xa0, 0x48, 0x92, 0x25, 0xea, 0x11, 0x4d, 0xb2, 0x49, 0xaa, 0x96, 0x6a, 0x95, 0xaa, 0x55, 0x75, 0x8a, 0x7d, 0xd2, 0x46, 0x94, 0x20, 0x51, 0x8c, 0xb2, 0x44, 0xaa, 0x10, 0x82, 0x28, 0x02, 0x81, 0x50, 0x0f, 0x50, 0x02, 0x55, 0x00, 
0x00, 0x00, 0x02, 0x14, 0x49, 0x22, 0x94, 0x41, 0x15, 0xaa, 0x00, 0x52, 0xac, 0x40, 0x15, 0xe2, 0x09, 0x50, 0xa5, 0x55, 0x98, 0x64, 0xb5, 0x40, 0xec, 0xb9, 0x60, 0xda, 0xae, 0x71, 0xca, 0xbd, 0x52, 0xa5, 0x5a, 0xa8, 0x57, 0xaa, 0x54, 0x4b, 0xb4, 0x65, 0x8b, 0x75, 0xae, 0x49, 0x12, 0x61, 0x44, 0x8a, 0xb0, 0x0b, 0xaa, 0x48, 0x12, 0x40, 0x94, 0x22, 0x4c, 0x11, 0x24, 0x01, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x10, 0x04, 0x29, 0xd4, 0x22, 0x81, 0x5c, 0xa2, 0x09, 0x6a, 0x95, 0x52, 0xad, 0x55, 0xaa, 0x57, 0xb8, 0x67, 0x9d, 0x6a, 0x6b, 0x96, 0x5a, 0x55, 0xa6, 0x59, 0x95, 0x66, 0x99, 0x55, 0xaa, 0x95, 0x62, 0x9d, 0x42, 0xb5, 0x4c, 0x91, 0xab, 0x54, 0x2b, 0x54, 0xba, 0x45, 0x14, 0x2a, 0x05, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x02, 0x05, 0x08, 0x0b, 0x12, 0x04, 0x1b, 0x15, 0x26, 0x59, 0x25, 0x5a, 0x55, 0x25, 0x1a, 0x65, 0x15, 0x2a, 0x49, 0x32, 0x8e, 0x21, 0x5a, 0x24, 0x0b, 0x22, 0x08, 0x0b, 0x02, 0x08, 0x02, 0x04, 0x01, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM DitherEarth128[] = {
128, 128,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xc0, 0xc0, 0x60, 0x60, 0xd0, 0xb0, 0xe0, 0x58, 0xf0, 0x28, 0xec, 0xb0, 0x4c, 0xa0, 0x5e, 0x40, 0xda, 0x26, 0xe8, 0x97, 0x68, 0xd3, 0xac, 0x51, 0xe4, 0x93, 0x6c, 0x92, 0x69, 0x96, 0x70, 0xcd, 0x12, 0x64, 0x2a, 0x54, 0x82, 0x38, 0x82, 0x54, 0x08, 0xa4, 0x48, 0xa0, 0x08, 0x50, 0x00, 0x90, 0x40, 0x00, 0x20, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x80, 0x60, 0x90, 0x68, 0x90, 0x4c, 0xb2, 0x4c, 0xb3, 0x46, 0xbb, 0xc5, 0xa9, 0xd6, 0xc9, 0x55, 0xea, 0xd6, 0xbb, 0x66, 0x9d, 0xeb, 0x32, 0xed, 0xb3, 0x6e, 0x51, 0xbb, 0x56, 0xf5, 0x4d, 0xb9, 0x66, 0x5d, 0x13, 0xdf, 0x12, 0x6d, 0xa7, 0xde, 0x75, 0xdf, 0xb5, 0xaa, 0x57, 0x48, 0x55, 0x48, 0xd2, 0xa0, 0x5a, 0xa0, 0xca, 0x00, 0xfe, 0x41, 0xb4, 0x41, 0x82, 0x14, 0x40, 0x05, 0x50, 0x8a, 0x40, 0x14, 0x40, 0x88, 0x22, 0x00, 0x88, 0x00, 0x44, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xe0, 0x10, 0x28, 0xd4, 0x1a, 0x65, 0x9a, 0x2d, 0xd2, 0x6d, 0x93, 0x7c, 0x4b, 0x2c, 0xd3, 0x3e, 0xc1, 0x3f, 0x41, 0xed, 0x32, 0x55, 0xba, 0x49, 0x1f, 0x60, 0xb7, 0x4a, 0x33, 0xcc, 0xb3, 0x4c, 0xa3, 0x5d, 0xa0, 0x4e, 0xb1, 0x4a, 0x95, 0xe8, 0x15, 0x62, 0x89, 0x34, 0xc2, 0x2b, 0x51, 0x85, 0x50, 0xa5, 0x4a, 0x21, 0xdd, 0x21, 0xd6, 0x91, 0x6e, 0xc9, 0x56, 0xed, 0x93, 0x6e, 0x81, 0xab, 0x24, 0xc9, 0x12, 0xa1, 0x52, 0x45, 0x90, 0x42, 0x14, 0xa1, 0x0a, 0x50, 0x8a, 0x24, 0x22, 0x48, 0x02, 0x54, 0x00, 0x22, 0x08, 0x20, 0x80, 0x09, 0x00, 0x20, 0x00, 0x44, 0x00, 0x20, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xd0, 0xb0, 0xec, 0x62, 0x09, 0x32, 0x44, 0x11, 0x46, 0x90, 0x2d, 0x12, 0xe5, 0x1b, 0xe4, 0xab, 0x70, 0x4d, 0x90, 0x7a, 0x58, 0x9a, 0x62, 0xd9, 0x26, 0xc9, 0x32, 0xc9, 0x56, 0x21, 0x09, 0x40, 0x07, 0xfd, 0x56, 0xbb, 0xfe, 0x45, 0xbf, 0x6a, 0xd5, 0xbe, 0xd5, 0x2b, 0xfc, 0x85, 0x5b, 0xaa, 0x05, 0xfa, 0x85, 0xdb, 0xb5, 0xd6, 0xa9, 0x3e, 0xe5, 0xbd, 0xfe, 0xab, 0xf6, 0x5d, 0xf6, 0x2b, 0xd7, 0x2a, 0xd5, 0x25, 0xda, 0x25, 0xc8, 0x12, 0xed, 0x00, 0x6d, 0x91, 0x4a, 0x11, 0x2a, 0x44, 0xa9, 0x22, 0x48, 0x95, 0x20, 0x85, 0x22, 0x49, 0x00, 0x25, 0x80, 0x10, 0x42, 0x00, 0x90, 0x42, 0x00, 0x20, 0x00, 0x02, 0x40, 0x00, 0x00, 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xdc, 0xf6, 0x5f, 0xff, 0xb6, 0xfc, 0xc1, 0xf4, 0xf9, 0xf4, 0xe1, 0xc8, 0xc2, 0xd4, 0x80, 0xa9, 0xc4, 0x60, 0xdd, 0xfa, 0xad, 0xff, 0xbb, 0xee, 0xeb, 0xbe, 0xf5, 0xcb, 0x76, 0x89, 0x7e, 0xa8, 0xd5, 0xba, 0xa8, 0x76, 0x9d, 0xf3, 0xac, 0xdb, 0x25, 0xdd, 0xb3, 0x6c, 0x9b, 0x6c, 0x93, 0x6e, 0x89, 0x76, 0x8c, 0x63, 0x8c, 0xf3, 0x2d, 0xfa, 0xa6, 0x7f, 0xff, 0xd5, 0xff, 0xb7, 0x5d, 0x36, 0xdb, 0x24, 0xdb, 0x64, 0x9b, 0x64, 0x5b, 0xd4, 0x25, 0xba, 0xc5, 0x3a, 0xe5, 0x8a, 0x50, 0x87, 0x50, 0x85, 0x28, 0x82, 0x48, 0x81, 0x28, 0xc2, 0x14, 0xc0, 0x3d, 0xc0, 0x3e, 0x80, 0x35, 0x4a, 0x11, 0x08, 0x22, 0x80, 0x09, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x40, 0xe8, 0x7d, 0xf7, 0xfe, 0xbb, 0xfd, 0xdf, 0xff, 0xbd, 0xff, 0xef, 0xbf, 0xfd, 0xdf, 0xff, 0xfe, 0x6e, 0xbb, 0x05, 0x1f, 0xd2, 0xbf, 0xdd, 0xaf, 0xfe, 0xdb, 0x77, 0xff, 0xd6, 0x7f, 0xfe, 0xe3, 0x01, 0x83, 0x1e, 0x25, 0x3a, 0x77, 0x0c, 0x3b, 0xe5, 0x9a, 0x6e, 0xd9, 0xa7, 0x5a, 0xbf, 0x65, 0xbb, 0x6d, 0x9b, 0x76, 0xa9, 0x5f, 0xd4, 0xbb, 0x65, 0xdb, 0x72, 0xdd, 0xf2, 0x95, 0xef, 0x52, 0xb7, 0xec, 0x91, 0x7f, 0xd8, 0xf5, 0xda, 0xed, 0xd2, 0xbd, 0x62, 0xad, 0xf2, 0x8c, 0xfa, 0xa5, 0x5a, 0xe4, 0xbb, 0x56, 0xed, 0x5b, 0xb6, 0x69, 0x96, 0x29, 0xca, 0x35, 0x4a, 0x15, 0xea, 0x05, 0x50, 0xaa, 0x44, 0x10, 0xa1, 0x00, 0x84, 0x10, 0x40, 0x02, 0x10, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
0x00, 0xe8, 0xff, 0xef, 0x7d, 0xff, 0xff, 0x7f, 0xfa, 0xaf, 0xfe, 0xf7, 0xff, 0x7d, 0xff, 0xdf, 0xfb, 0xbf, 0xfa, 0xd7, 0x7f, 0x80, 0x00, 0x1f, 0xf4, 0xaf, 0xfa, 0xaf, 0xfd, 0x6f, 0xfd, 0xbf, 0xfb, 0xdf, 0xff, 0xfe, 0x7d, 0xec, 0xdc, 0xf6, 0xde, 0xf9, 0xb4, 0x68, 0x30, 0x01, 0x01, 0x01, 0xd1, 0xa1, 0x80, 0x65, 0x41, 0x84, 0x53, 0x87, 0x1a, 0xaf, 0x5d, 0xf7, 0x2d, 0xff, 0xb5, 0x6f, 0xba, 0x6f, 0xd3, 0x3f, 0x5a, 0xad, 0x53, 0x5f, 0x96, 0x6d, 0x96, 0x7d, 0x8b, 0x77, 0x8f, 0x7c, 0x0b, 0x3e, 0x05, 0x1f, 0x25, 0x1b, 0x65, 0x88, 0x23, 0xdc, 0x27, 0x9c, 0x73, 0x0c, 0x73, 0xad, 0x52, 0xac, 0x53, 0x88, 0x26, 0x11, 0x08, 0x02, 0x80, 0x24, 0x00, 0x02, 0x00, 0x01, 0x00, 0x80, 0x10, 0x44, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x80, 0x00, 0x22, 0x00, 0x00, 
0x11, 0xff, 0xfe, 0xdb, 0xaf, 0xff, 0xd7, 0xad, 0xb7, 0xff, 0x5b, 0xfe, 0xaf, 0xfb, 0xd7, 0xfe, 0xeb, 0xfd, 0xee, 0xfb, 0xff, 0xf6, 0xb8, 0xfb, 0x98, 0xff, 0xcf, 0xfa, 0x5f, 0x6f, 0x7f, 0x2b, 0x1f, 0x2d, 0x9f, 0x0f, 0x0b, 0x0f, 0x0e, 0x0b, 0x03, 0x00, 0x01, 0x10, 0x00, 0x00, 0x10, 0x00, 0x04, 0x10, 0x44, 0x11, 0xb3, 0x48, 0x13, 0xf4, 0x8d, 0x72, 0xde, 0xfb, 0xaf, 0x5a, 0x7f, 0xb6, 0xed, 0xdb, 0x75, 0xdd, 0xab, 0xbf, 0x44, 0x1f, 0x2c, 0x17, 0x04, 0x03, 0x02, 0x41, 0x00, 0x20, 0x00, 0x00, 0x00, 0x21, 0x00, 0x10, 0x40, 0x07, 0x64, 0x92, 0x4a, 0x44, 0x89, 0xa4, 0x51, 0x84, 0x29, 0x82, 0x29, 0x84, 0x11, 0x8a, 0x24, 0x90, 0x00, 0x20, 0x00, 0x00, 0x00, 0x08, 0x20, 0x04, 0x20, 0x04, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x80, 0x04, 0x00, 
0x02, 0x7d, 0xe7, 0xda, 0x2d, 0xf6, 0xff, 0xea, 0xff, 0xf6, 0xad, 0xfb, 0xa4, 0x7f, 0xe7, 0x9b, 0x7f, 0xb7, 0xed, 0xff, 0xff, 0xbf, 0xf2, 0xfd, 0xbf, 0xfe, 0x7f, 0xbb, 0xfc, 0xae, 0x7e, 0xf4, 0x1c, 0x0c, 0x00, 0x80, 0x03, 0x42, 0x00, 0x01, 0x20, 0x00, 0x00, 0x04, 0xa1, 0x00, 0x10, 0x05, 0x00, 0x09, 0x00, 0x04, 0x08, 0x25, 0xc0, 0x37, 0xc5, 0xad, 0xb5, 0xc4, 0xb2, 0xe0, 0xbd, 0x52, 0xfd, 0x97, 0x6f, 0x91, 0x6e, 0x02, 0x29, 0x00, 0x00, 0x00, 0x40, 0x80, 0x40, 0x02, 0x50, 0x40, 0x40, 0x00, 0x80, 0x50, 0x80, 0x44, 0x00, 0xfa, 0x01, 0xfc, 0x82, 0x32, 0xc4, 0x3a, 0x44, 0x92, 0x00, 0x84, 0x00, 0x06, 0x08, 0x04, 0x02, 0x20, 0x90, 0x00, 0x02, 0x10, 0x00, 0x89, 0x00, 0x04, 0x00, 0x40, 0x11, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x25, 0x4b, 0x1c, 0xe3, 0x0d, 0xfa, 0x0f, 0xab, 0xbf, 0x5f, 0xff, 0x68, 0x5f, 0xeb, 0x7e, 0xc5, 0xbf, 0xe4, 0xd7, 0xbf, 0xfd, 0xaf, 0xfa, 0x5f, 0x73, 0x9f, 0x6a, 0x15, 0x0a, 0x43, 0x10, 0x00, 0x04, 0x00, 0x40, 0x00, 0x28, 0x00, 0x20, 0x80, 0x08, 0x01, 0xa0, 0x80, 0x50, 0x40, 0x80, 0x90, 0x24, 0x99, 0x10, 0xd0, 0x2e, 0xad, 0x9b, 0x56, 0xed, 0xd8, 0x24, 0xd5, 0x0a, 0x76, 0x2b, 0xfc, 0xe2, 0xaa, 0xc1, 0xfa, 0xa0, 0xec, 0xb5, 0xa0, 0x4a, 0x90, 0x20, 0xd6, 0x41, 0xd0, 0x53, 0xa0, 0x01, 0x28, 0x24, 0xc9, 0x10, 0xc1, 0x34, 0xe1, 0x8a, 0x74, 0x83, 0x4c, 0x31, 0x8e, 0x30, 0x1c, 0x40, 0x09, 0x20, 0x80, 0x04, 0x40, 0x02, 0x00, 0x10, 0x00, 0x92, 0x40, 0x00, 0x24, 0x00, 0x01, 0x48, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x40, 0x02, 0x00, 
0x00, 0x00, 0x01, 0x05, 0x2a, 0x55, 0xaa, 0x55, 0xaa, 0x54, 0x2b, 0xd4, 0x27, 0x49, 0xb5, 0x4b, 0x94, 0x56, 0xbf, 0x7b, 0xdf, 0xaa, 0x0f, 0x22, 0xc8, 0x12, 0x08, 0x24, 0x01, 0x50, 0x00, 0x22, 0x80, 0x29, 0x50, 0x04, 0x20, 0x03, 0x0a, 0x8f, 0x08, 0x7f, 0x2d, 0xf1, 0x80, 0x54, 0xc1, 0xe0, 0xc2, 0xa8, 0xc0, 0x16, 0x00, 0x23, 0x0c, 0x1a, 0x09, 0x88, 0x2b, 0x14, 0x61, 0x07, 0x51, 0x45, 0x2a, 0x17, 0x26, 0x23, 0x2b, 0x12, 0x75, 0x0f, 0x39, 0xe5, 0x1e, 0x72, 0x2d, 0x4b, 0x9e, 0x61, 0x87, 0x6c, 0xd1, 0x0e, 0xb1, 0x0e, 0xf4, 0x0b, 0xb4, 0x4b, 0x24, 0x2b, 0x04, 0x29, 0x02, 0x14, 0x00, 0x01, 0x88, 0x22, 0x00, 0x0a, 0x10, 0x80, 0x08, 0x02, 0x00, 0x80, 0x00, 0x11, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x0a, 0x35, 0xea, 0x15, 0xea, 0x11, 0xee, 0x11, 0xe4, 0x1b, 0xd4, 0xe3, 0x5d, 0xe2, 0x2c, 0xd9, 0x6e, 0x4c, 0xb5, 0x48, 0x45, 0x90, 0x02, 0xc8, 0xa4, 0x00, 0x12, 0xc0, 0x09, 0x84, 0x20, 0x00, 0x08, 0x40, 0x80, 0x08, 0x00, 0x63, 0x81, 0x0b, 0x01, 0x23, 0x4d, 0x42, 0x57, 0x82, 0x67, 0xa2, 0x05, 0x50, 0x24, 0x84, 0x69, 0x02, 0x44, 0x30, 0x54, 0x24, 0x80, 0x12, 0x90, 0x28, 0x51, 0x20, 0x11, 0x68, 0x08, 0x9a, 0x00, 0xa5, 0x92, 0x51, 0x93, 0xd4, 0x01, 0x42, 0x88, 0x20, 0x41, 0xa4, 0x41, 0x22, 0x88, 0x20, 0x00, 0x00, 0x22, 0x00, 0x04, 0x21, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x00, 0x01, 0x00, 0x10, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x03, 0x0e, 0x59, 0x36, 0xe9, 0xd6, 0xaa, 0xd5, 0xfe, 0x51, 0xef, 0x85, 0x53, 0x0d, 0x43, 0x18, 0xb2, 0x08, 0x50, 0xad, 0x50, 0xff, 0xaa, 0x04, 0x50, 0xa0, 0x1d, 0x50, 0x0a, 0x10, 0x01, 0x49, 0x04, 0x84, 0x20, 0x46, 0x1a, 0xa4, 0x22, 0x25, 0xc0, 0x06, 0x21, 0x48, 0xa4, 0x03, 0x48, 0xa4, 0x10, 0x85, 0x20, 0x40, 0x09, 0x48, 0x04, 0x48, 0x20, 0x89, 0x08, 0x21, 0x24, 0x81, 0x28, 0xa1, 0x05, 0x2a, 0x54, 0x0b, 0x54, 0x2d, 0x83, 0x1e, 0xa0, 0x5a, 0x24, 0x5a, 0x04, 0x2b, 0x54, 0x22, 0x99, 0x28, 0x40, 0xa4, 0x40, 0x02, 0x00, 0x40, 0x01, 0x20, 0x00, 0x00, 0x01, 0x00, 0x80, 0x00, 0x40, 0x00, 0x20, 0x00, 0x08, 0x00, 0x84, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0b, 0x02, 0x1f, 0x57, 0x1f, 0x75, 0xaf, 0x50, 0xb5, 0x6a, 0x66, 0x48, 0x55, 0x5e, 0x99, 0x36, 0x4d, 0x93, 0x66, 0xc8, 0xa0, 0xc4, 0x91, 0x40, 0x85, 0x10, 0x53, 0x04, 0xaa, 0x01, 0x24, 0x4a, 0x31, 0xd6, 0x20, 0xab, 0xa8, 0x85, 0x3a, 0xa0, 0x4c, 0x10, 0xaa, 0x94, 0x20, 0xc5, 0x10, 0x4b, 0xa0, 0x11, 0xa4, 0x4a, 0xa9, 0x12, 0x65, 0x08, 0xd6, 0x20, 0x8a, 0x65, 0x04, 0x21, 0x8c, 0x22, 0x08, 0x42, 0x10, 0x04, 0xa0, 0x0a, 0x00, 0x90, 0x01, 0x10, 0x40, 0x01, 0x10, 0x00, 0x02, 0x00, 0x45, 0x00, 0x04, 0x00, 0x40, 0x00, 0x04, 0x20, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x04, 0x0b, 0x0a, 0x1e, 0x28, 0x37, 0xc9, 0xa4, 0xa1, 0x5a, 0x22, 0x09, 0x52, 0x25, 0x41, 0x95, 0x27, 0x4a, 0x8e, 0x28, 0x54, 0x99, 0x30, 0xb4, 0x30, 0x44, 0x70, 0x42, 0x60, 0xc4, 0x91, 0x80, 0xa6, 0x00, 0x92, 0x49, 0x00, 0x0a, 0x20, 0x85, 0x00, 0x2a, 0x00, 0x08, 0xa1, 0x14, 0x40, 0x14, 0x8a, 0x40, 0x01, 0x50, 0x04, 0x82, 0x10, 0x41, 0x04, 0x20, 0x0a, 0x00, 0x08, 0x20, 0x02, 0x08, 0x00, 0x84, 0x01, 0x00, 0x10, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x06, 0x00, 0x0a, 0x05, 0x08, 0x05, 0x1a, 0x00, 0x15, 0x2a, 0x20, 0x0e, 0x11, 0x22, 0x15, 0x40, 0x28, 0x01, 0x12, 0x23, 0x82, 0x05, 0x13, 0x06, 0x48, 0x06, 0x0c, 0x10, 0x0d, 0x22, 0x10, 0x44, 0x10, 0x02, 0x08, 0x00, 0x04, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM DitherEarth128Mask[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xf8, 0xf0, 0xe0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xd0, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x40, 0xe8, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xc0, 0x00, 0x00, 
0x00, 0xe8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 
0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x25, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 
0x00, 0x00, 0x01, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x03, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x1f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x1f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0f, 0x1f, 0x1f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x1f, 0x0f, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM DJupiter64[] = {
64, 61,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x50, 0x00, 0x50, 0x80, 0x50, 0x44, 0x90, 0x40, 0x54, 0x40, 0x94, 0x60, 0x94, 0x50, 0x44, 0x90, 0x54, 0x40, 0x54, 0x80, 0x54, 0x40, 0x50, 0x80, 0x50, 0x40, 0x10, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x40, 0x94, 0x40, 0x55, 0x90, 0x65, 0x58, 0x45, 0x54, 0x55, 0x69, 0xb6, 0xeb, 0xaa, 0xfd, 0xaa, 0xed, 0xba, 0xf5, 0xad, 0xfa, 0xaf, 0xea, 0xb5, 0xf5, 0xba, 0xe5, 0xb5, 0xfa, 0xeb, 0xae, 0xf9, 0xad, 0xf4, 0xb5, 0xe9, 0xb6, 0xe9, 0xb5, 0xd4, 0xd5, 0xa8, 0xd5, 0xd4, 0xa0, 0xb4, 0x40, 0x50, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x40, 0x14, 0x41, 0x14, 0x49, 0x14, 0x65, 0x14, 0x55, 0xa5, 0x5a, 0xad, 0x6d, 0x9d, 0x6d, 0x5d, 0x4f, 0xde, 0xab, 0xfe, 0xaf, 0xfa, 0xaf, 0xfe, 0xaf, 0xfe, 0xaf, 0xbb, 0xee, 0x9f, 0xef, 0xae, 0xff, 0xab, 0xfe, 0xaf, 0xee, 0xbf, 0xab, 0xfe, 0xaf, 0xae, 0xff, 0xaa, 0xff, 0xaa, 0xbf, 0xaa, 0xdf, 0xaa, 0xae, 0xdb, 0xaa, 0xb7, 0xaa, 0xaa, 0xaa, 0xa8, 0xa0, 0x00, 0x00, 
0x00, 0x00, 0x51, 0x04, 0x51, 0x84, 0x51, 0x55, 0x24, 0x59, 0xad, 0xaa, 0xd5, 0x54, 0xd5, 0xb4, 0xed, 0xba, 0xed, 0xbd, 0xee, 0xbb, 0xee, 0xba, 0xef, 0xba, 0xef, 0xba, 0xee, 0xff, 0xaa, 0xff, 0xfa, 0xee, 0xfb, 0xbe, 0xfa, 0xed, 0xfe, 0xba, 0xef, 0xfe, 0xbb, 0xee, 0xbb, 0xfe, 0xaa, 0xfe, 0xb5, 0xee, 0xbb, 0xee, 0xba, 0xae, 0xfa, 0xa6, 0xba, 0xaa, 0xea, 0x9a, 0x6a, 0x0a, 0x52, 0x00, 
0x80, 0x00, 0x05, 0x50, 0x05, 0x48, 0x15, 0x45, 0x59, 0xad, 0xaa, 0xb7, 0xaa, 0xdb, 0xaf, 0xba, 0x6f, 0x3b, 0xee, 0xbb, 0xef, 0xbb, 0x7f, 0x6b, 0xbf, 0xfb, 0xbf, 0xef, 0xbb, 0xff, 0xbf, 0xfb, 0x6f, 0xbf, 0xeb, 0xbf, 0xef, 0xbb, 0xef, 0xdf, 0xab, 0xbf, 0xef, 0xbb, 0xaf, 0xff, 0xab, 0x7f, 0xab, 0xfe, 0xaf, 0x6b, 0xbe, 0xab, 0x6e, 0xbb, 0xa6, 0x5b, 0xaa, 0x26, 0x59, 0x05, 0x48, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x04, 0x11, 0x04, 0x55, 0x02, 0x55, 0x0a, 0x56, 0xab, 0xae, 0xab, 0xde, 0xab, 0x6f, 0xaf, 0xba, 0xef, 0xaf, 0xfb, 0xaf, 0xff, 0xae, 0xef, 0xbe, 0xef, 0xbf, 0xee, 0xbb, 0xfe, 0xba, 0xfa, 0xba, 0xde, 0xda, 0xfe, 0xaf, 0xff, 0xaf, 0xfe, 0xaf, 0xff, 0xae, 0xff, 0xab, 0xfe, 0xaf, 0xba, 0x6f, 0xbb, 0xae, 0x5b, 0x26, 0x5b, 0x2a, 0x05, 0x14, 0x01, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x15, 0x00, 0x16, 0x42, 0x2a, 0x2b, 0x0a, 0x55, 0x2a, 0x2a, 0xad, 0x2a, 0x5e, 0x29, 0x2c, 0x5d, 0x2a, 0x2f, 0x5a, 0xab, 0xae, 0x5b, 0x4a, 0x9f, 0x4a, 0x5b, 0x2e, 0x2b, 0x5a, 0x2f, 0xaa, 0xae, 0xa9, 0xae, 0x2a, 0x15, 0x2a, 0x0a, 0x15, 0x04, 0x11, 0x04, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x04, 0x01, 0x00, 0x05, 0x00, 0x05, 0x01, 0x04, 0x02, 0x00, 0x05, 0x00, 0x04, 0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM Mask64[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x80, 0xf0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xe0, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 
0x00, 0x01, 0x07, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x03, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM TitleScreen[] = {
128, 64,
0x55, 0xab, 0xff, 0x06, 0xfc, 0x00, 0x00, 0x20, 0x00, 0x55, 0xab, 0xff, 0x06, 0xfc, 0x55, 0xaa, 0xfd, 0x07, 0xf7, 0x17, 0xd7, 0x97, 0xf7, 0x06, 0xfc, 0x55, 0xaa, 0xfd, 0x07, 0xf7, 0x17, 0x97, 0xe6, 0x04, 0xf8, 0xa0, 0xc0, 0x60, 0x60, 0x60, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x10, 0x00, 0x01, 0x2a, 0x25, 0x8f, 0x1a, 0x7d, 0x36, 0xac, 0xa5, 0xac, 0x9a, 0xd8, 0xd0, 0xc0, 0xc0, 0xc0, 0xc2, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x82, 0x84, 0x80, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x08, 0x10, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 
0x05, 0x0a, 0x1f, 0x60, 0x8f, 0x90, 0x38, 0x30, 0x38, 0x3d, 0x9a, 0x8f, 0x60, 0x1f, 0x55, 0xaa, 0xff, 0x00, 0xfb, 0x0a, 0x5b, 0xaa, 0xfb, 0x00, 0xff, 0x55, 0xaa, 0xff, 0x00, 0xfb, 0x0a, 0x0b, 0x09, 0x08, 0x07, 0xaa, 0xcf, 0x50, 0x26, 0x2d, 0x0d, 0x19, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x08, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xe0, 0x70, 0x70, 0xf8, 0xfc, 0xfe, 0xfe, 0xdf, 0xff, 0x5f, 0xff, 0x5f, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xff, 0xeb, 0xff, 0xeb, 0xff, 0xef, 0x7f, 0x7d, 0x7b, 0x73, 0x67, 0xcb, 0xd6, 0xaa, 0xfe, 0xfe, 0xfe, 0xfc, 0xcc, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xa8, 0xfc, 0x0c, 0x08, 0x30, 0xc1, 0xe1, 0x71, 0x31, 0x0c, 0x0c, 0xf8, 0x00, 0xa8, 0xfc, 0x0d, 0xf9, 0x01, 0x00, 0x00, 0xa8, 0xfd, 0x0d, 0xf9, 0x00, 0x28, 0x71, 0x9d, 0x8d, 0x2c, 0x2c, 0x48, 0xb0, 0x00, 0x14, 0x39, 0xad, 0xed, 0x0d, 0xed, 0x2d, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x01, 0x02, 0x08, 0x18, 0x1c, 0x1c, 0x1c, 0x1e, 0x3e, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0xfd, 0xfb, 0xf4, 0xea, 0xf4, 0xf9, 0xf3, 0xcf, 0xff, 0xff, 0xfd, 0xff, 0xf5, 0xff, 0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0x7b, 0xfd, 0xfd, 0xfe, 0xfe, 0x1e, 0x1f, 0x0f, 0x27, 0x77, 0x27, 0x07, 0x06, 0x4e, 0x9f, 0x3d, 0x7d, 0xff, 0x9b, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 
0x00, 0x0a, 0x1f, 0x10, 0x1f, 0x02, 0x04, 0x04, 0x02, 0x1f, 0x10, 0x10, 0x1f, 0x00, 0x02, 0x0b, 0x04, 0x08, 0x11, 0x12, 0x13, 0x11, 0x08, 0x04, 0x23, 0x00, 0x0a, 0x1e, 0x14, 0x16, 0x13, 0x10, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x1f, 0x10, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81, 0x03, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1c, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3e, 0x7f, 0x7f, 0x7f, 0x7f, 0xef, 0xcf, 0xde, 0xfe, 0xfc, 0xf8, 0xfa, 0xf0, 0xb0, 0x60, 0xc0, 0xc4, 0x98, 0x83, 0x8f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x55, 0xaa, 0x55, 0xfb, 0x0f, 0xef, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0xad, 0x6a, 0xdc, 0xb8, 0x70, 0xe5, 0x0b, 0x55, 0xab, 0x7f, 0xee, 0x0d, 0xea, 0x3c, 0x55, 0xaa, 0x55, 0xfb, 0x0f, 0xef, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x2d, 0x2a, 0x2c, 0x38, 0x00, 0x55, 0xab, 0x57, 0xfe, 0x0c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x1c, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 
0x55, 0xaa, 0x55, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0xff, 0x00, 0xff, 0x00, 0x55, 0xaa, 0x55, 0xff, 0x00, 0xff, 0x00, 0x55, 0xaa, 0x55, 0xff, 0x00, 0x7f, 0x40, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x70, 0x60, 0xc0, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
0x55, 0xaa, 0x55, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x55, 0xaa, 0xff, 0x00, 0xff, 0x00, 0x55, 0xaa, 0x55, 0xff, 0x00, 0xff, 0x00, 0x55, 0xaa, 0x55, 0xff, 0x00, 0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x21, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0x55, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
0x15, 0x2a, 0x55, 0xff, 0x80, 0xbf, 0xa0, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xba, 0xb5, 0xda, 0xef, 0x70, 0x3f, 0x28, 0x55, 0xaa, 0xf5, 0xbf, 0x80, 0xbf, 0xe0, 0x15, 0x2a, 0x55, 0xff, 0x80, 0xbf, 0xa0, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xbc, 0xb8, 0xb0, 0xe0, 0x00, 0x14, 0x28, 0x55, 0xeb, 0xb2, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x30, 0x30, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM SaturnSmall[] = {
123, 49,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x50, 0x80, 0x50, 0x40, 0x94, 0x50, 0x44, 0x58, 0xaa, 0xaa, 0x6a, 0x94, 0xe9, 0xac, 0xea, 0x94, 0xd5, 0xa8, 0x76, 0xaa, 0xea, 0x9a, 0xe4, 0xb8, 0xa4, 0xd8, 0xc8, 0xb0, 0xa0, 0x50, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x50, 0x04, 0x51, 0x84, 0x51, 0x24, 0x55, 0xa8, 0x55, 0x54, 0xa5, 0xd4, 0xb5, 0xe9, 0xae, 0xb9, 0xec, 0xad, 0xfa, 0xae, 0xea, 0xbe, 0xe9, 0xbe, 0xeb, 0xba, 0xef, 0xba, 0xee, 0xab, 0xfe, 0xa9, 0xfe, 0xaa, 0xff, 0xaa, 0xfb, 0xae, 0xd9, 0xd6, 0xd5, 0xb4, 0xe8, 0xa8, 0xa0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x40, 0x00, 0x40, 0x80, 0x40, 0x20, 0x20, 0x40, 0x10, 0x40, 0x90, 0x40, 0x50, 0x80, 0x50, 0x40, 0x10, 0x60, 0x10, 0x50, 0x10, 0x40, 0x18, 0x48, 0x08, 0x08, 0x50, 0x04, 0x10, 0x08, 0x10, 0x04, 0x08, 0x10, 0x04, 0x10, 0x44, 0x10, 0x45, 0x08, 0x55, 0x04, 0x69, 0x24, 0x55, 0x41, 0x55, 0xa2, 0xb5, 0x61, 0x56, 0xd1, 0xa4, 0xf5, 0xa2, 0xf5, 0xa2, 0xf5, 0xa2, 0xf5, 0xa2, 0xeb, 0xea, 0xab, 0xea, 0xab, 0xea, 0xab, 0xea, 0xab, 0xea, 0xab, 0xea, 0xab, 0xea, 0xab, 0xea, 0xab, 0xea, 0xab, 0xca, 0xcb, 0xca, 0x4b, 0xca, 0x85, 0xd0, 0x04, 0x10, 0x08, 0x08, 0x08, 0x48, 0x08, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x20, 0x00, 0x50, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 
0x01, 0x00, 0x01, 0x04, 0x01, 0x02, 0x00, 0x05, 0x00, 0x05, 0x01, 0x05, 0x04, 0x01, 0x14, 0x05, 0x04, 0x05, 0x14, 0x09, 0x0c, 0x02, 0x14, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x54, 0x01, 0x54, 0x01, 0x55, 0x29, 0x55, 0x95, 0xd5, 0xa5, 0xdd, 0xaa, 0x6d, 0xbd, 0xab, 0xbe, 0x6b, 0xbe, 0xab, 0xfe, 0xab, 0xfe, 0xab, 0xfe, 0xaf, 0xfa, 0xaf, 0xfe, 0xab, 0xff, 0xae, 0xfb, 0xaf, 0xfe, 0xbb, 0xef, 0xbe, 0xfb, 0xaf, 0xfe, 0xbb, 0xef, 0xbe, 0xeb, 0xbe, 0xef, 0xba, 0xef, 0xbb, 0xee, 0x1b, 0x4a, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x08, 0x10, 0x04, 0x10, 0x00, 0x14, 0x00, 0x14, 0x01, 0x14, 0x01, 0x04, 0x11, 0x04, 0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 0x00, 0x04, 0x01, 0x00, 0x01, 0x00, 0x01, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x11, 0x44, 0x11, 0x45, 0x1a, 0x4a, 0x4a, 0x16, 0x6a, 0xab, 0xb6, 0xa9, 0xee, 0x9b, 0xea, 0xaf, 0xba, 0xe6, 0xbb, 0x6e, 0xaa, 0xbf, 0xea, 0xbb, 0xae, 0xfb, 0xae, 0xeb, 0xbe, 0xeb, 0xbe, 0xeb, 0xbe, 0xeb, 0xbe, 0xeb, 0xbe, 0xeb, 0xbe, 0xab, 0xfe, 0xab, 0xae, 0xbb, 0x26, 0x12, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x15, 0x01, 0x14, 0x41, 0x16, 0x42, 0x1a, 0x4a, 0x16, 0x49, 0x16, 0x6a, 0x2b, 0x1a, 0x67, 0x1a, 0x6d, 0x2a, 0x2d, 0x5a, 0xae, 0xab, 0xb6, 0xaa, 0x5b, 0x2e, 0x2a, 0x5b, 0x2e, 0x0a, 0x1b, 0x06, 0x09, 0x06, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM SaturnSmallMask[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf8, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x78, 0x78, 0x78, 0x78, 0x78, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0x78, 0x78, 0x78, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 
0x01, 0x01, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x1e, 0x1e, 0x1e, 0x1e, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x07, 0x07, 0x1f, 0x1f, 0x3f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM exhaust1[] = {
16, 10,
0x00, 0x00, 0x80, 0xc0, 0xc0, 0x60, 0x60, 0x30, 0x30, 0x38, 0x3c, 0x2c, 0x3f, 0x3f, 0x0c, 0x0c, 
0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM exhaust1Mask[] = {
0x80, 0x80, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0x78, 0x78, 0x7c, 0x7e, 0x7f, 0x7f, 0x7f, 0x3f, 0x1e, 
0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM exhaust2[] = {
16, 10,
0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x20, 0x20, 0x20, 0x10, 0x18, 0x0c, 0x1e, 0x1e, 0x0c, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM exhaust2Mask[] = {
0x00, 0x00, 0x80, 0xc0, 0xc0, 0xe0, 0x70, 0x70, 0x78, 0x7c, 0x3c, 0x3e, 0x3f, 0x3f, 0x1e, 0x0c, 
0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM exhaust3[] = {
16, 10,
0x00, 0x00, 0x80, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x18, 0x14, 0x1e, 0x18, 0x08, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM exhaust3Mask[] = {
0x00, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0x70, 0x70, 0x38, 0x38, 0x3c, 0x3e, 0x3e, 0x1e, 0x1e, 0x00, 
0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM UAPbullet1[] = {
12, 12,
0x00, 0xf0, 0x6c, 0xf4, 0x6a, 0x9e, 0x9e, 0x6a, 0xf4, 0x6c, 0xf0, 0x00, 
0x00, 0x00, 0x03, 0x02, 0x05, 0x07, 0x07, 0x05, 0x02, 0x03, 0x00, 0x00, 
};
const uint8_t PROGMEM UAPbullet2[] = {
12, 12,
0x00, 0x00, 0x90, 0x08, 0x94, 0x60, 0x60, 0x94, 0x08, 0x90, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 
};
const uint8_t PROGMEM UAPbullet3[] = {
12, 12,
0x00, 0xf0, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf0, 0x00, 
0x00, 0x00, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x00, 0x00, 
};
const uint8_t PROGMEM UAPbulletMask[] = {
0xf0, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf0, 
0x00, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x00, 
};
const uint8_t PROGMEM fragment[] = {
8, 8,
0x00, 0x3c, 0x72, 0x5a, 0x3e, 0x16, 0x0c, 0x00, 
};
const uint8_t PROGMEM fragmentMask[] = {
0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c, 
};
const uint8_t PROGMEM Computer[] = {
27, 13,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0x00, 0xff, 
0x1d, 0x1d, 0x14, 0x1d, 0x1d, 0x0d, 0x15, 0x0b, 0x15, 0x1b, 0x0d, 0x1d, 0x15, 0x1d, 0x15, 0x14, 0x1c, 0x15, 0x1d, 0x0d, 0x15, 0x0b, 0x15, 0x1b, 0x0d, 0x04, 0x03, 
};
const uint8_t PROGMEM ComputerMask[] = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x07, 0x03, 
};
const uint8_t PROGMEM Computer2[] = {
29, 14,
0xb0, 0xd8, 0x6c, 0xf6, 0xdb, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x00, 0x01, 0x03, 0x03, 
0x17, 0x2c, 0x36, 0x1b, 0x3e, 0x2a, 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
};
const uint8_t PROGMEM Computer2Mask[] = {
0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 
};

// Player Object
uint8_t PlayerHeight, gridY=3, PSX=25, PSY=40;
int LIVES;
int SCORE;
boolean firstRun = 0;
bool Right;
bool Left;
int deathAnim;

bool s = 1; // turn sound on and off

boolean start=false;    //If in menu or in game

//Screen anchour point
int ys = -10;
int rowy = 0;

uint8_t FPS = 50;
uint8_t i;
uint8_t x;
uint8_t y;

int LevelProgress;

//Terrain Array
uint8_t ter[17][9];
uint8_t terNew[17][9];

//Background stars
int starx[76];
int stary[76];
bool staroe[76];

//Plant Objects
int planetx[6];
int planety[6];
uint8_t planetExist[6];

//Debris Feild
int debrisx[10];
int debrisy[10];
uint8_t debrisExist[10];

uint8_t animateCycle = 0; // animate cycle counter

// UAP bullets
int UAPbulletx[4];
int UAPbullety[4];
uint8_t UAPbulletExist[4];

//Bullet Object
uint8_t bulletx[4];
uint8_t bullety[4];
bool bulletexist[4];
uint8_t bulletdelay = 0;

//UAP Object
int UAPx[4];
int UAPy[4];
uint8_t UAPexist[4];
uint8_t UAPpattern[5]; // Attack pattern;
uint8_t activeUAP;

uint8_t z;
uint8_t height = 14; // variable max height for random terrain generation

//int move;
uint8_t scanx = 0;
uint8_t scany = 0;

// Scroll Screen coordinates
uint8_t scrollScreenX;
uint8_t scrollScreenY;
uint8_t scrollScreenReset;

void setup() {
  arduboy.begin();
  arduboy.setFrameRate(FPS);
  arduboy.display();

// gennerate initial grid
  for (int x = 1; x < 14; x++)
  {
    for(int y = 1; y < 6 ; y++)
    {
      ter[x][y] = 0;
    }
  }

// generate stars
for (int i = 1; i < 75; i++)
{
  int rx = rand() % 127;
  starx[i] = rx;
  int ry = rand() % 63;
  stary[i] = ry;
  int roe =rand() % 2;
  staroe[i] = roe; // create 2 different kind of stars at two different speeds
}
}

// ############################## Start of Main Loop ################################################

void loop()
{

if (!arduboy.nextFrame())
{
  return;
}

// Title Screen

while (!start)
  {
    if (!start)
    {
      // Intro
      if (firstRun == 0)
      {
        for (int i = 1; i < 2000; i++)
        {
          x = rand() % 89 + 1;
          y = rand() % 17 + 1;
          arduboy.drawPixel(x+18,y+22,0);
          arduboy.display();
        }
        arduboy.clear();
      arduboy.display();
      }
      firstRun = 1;
      LIVES=100;
      LevelProgress = 0;
      SCORE = 0;
      deathAnim = 0;
      for (int i = 0; i < 30; i++)
      {
        arduboy.clear();
        Sprites::drawOverwrite(0, 0, TitleScreen, 0);

        if (i < 15)
        {
          arduboy.setCursor(60,57);
          arduboy.print("INSERT COIN");
        }
        if (arduboy.pressed(A_BUTTON))
        {
        start = true;
        }
        if (arduboy.pressed(B_BUTTON))
        {
        start = true;
        }

        if (arduboy.pressed(UP_BUTTON))
        {
        s = 1;
        }
        if (arduboy.pressed(DOWN_BUTTON))
        {
        s = 0;
        }

        if (arduboy.pressed(LEFT_BUTTON))
        {
          FPS = 25;
        }
        if (arduboy.pressed(RIGHT_BUTTON))
        {
          FPS = 50;
        }

        arduboy.setCursor(90,37);
        arduboy.print("SFX");
        if (s == 1)
        {
          arduboy.setCursor(94,47);
          arduboy.print("ON");
        }
        if (s == 0)
        {
          arduboy.setCursor(90,47);
          arduboy.print("OFF");
        }

        arduboy.setCursor(65,33);
        arduboy.print("FPS");
        arduboy.setCursor(68,43);
        arduboy.print(FPS);
        
        arduboy.display();
      }
    }
  }

arduboy.setFrameRate(FPS);

if (LIVES > 0)
{
// Player Shoot
if (bulletexist[1] == 1)
{
  bulletdelay++;
}
if (bulletexist[1] == 0)
{
  bulletdelay = 0;
}

if (arduboy.pressed(A_BUTTON))
{
  fire();
}

if (arduboy.pressed(B_BUTTON))
{
  fire();
}

// Move Player
Right = 0;
Left =0;

if (arduboy.pressed(UP_BUTTON))  
{
  if (PSY>30)
  {
    PSX=PSX-4;
    PSY=PSY-2;
    Left = 1;
  }
}
if (arduboy.pressed(RIGHT_BUTTON))
{
  if (PSY < 51)
  {
      PSX=PSX+4;
      PSY=PSY+2;
      Right = 1;
  }
}

if (arduboy.pressed(LEFT_BUTTON))  
{
  if (Left == 0)
  {
  if (PSY>30)
    {
      PSX=PSX-4;
      PSY=PSY-2;
      Left = 1;
    }
  }
}
if (arduboy.pressed(DOWN_BUTTON))
{
    if (Right == 0)
    {
      if (PSY < 51)
      {
        PSX=PSX+4;
        PSY=PSY+2;
        Right = 1;
      }
    } 
}
}
    // Detect Player Location on grid
    if (PSX < 24)
    {
      gridY=1;
    }

    if (PSX > 23)
    if (PSX < 34)
    {
      {
        gridY=2;
      }
    }

    if (PSX > 33)
    if (PSX < 44)
    {
      {
        gridY=3;
      }
    }

    if (PSX > 43)
    if (PSX < 54)
    {
      {
        gridY=4;
      }
    }

    if (PSX > 53)
      {
        gridY=5;
      }

    PlayerHeight = ter[11][gridY];
    
// Move and Draw Stars
for (int i = 1; i < 75; i++)
{
  if (staroe[i] == 0)
  {
  starx[i] = starx[i] - 4;
  stary[i] = stary[i] + 2;
  }
  else
  {
    starx[i] = starx[i] - 6;
    stary[i] = stary[i] + 3;
  }

  if (starx[i] < 0) // Loop Stars
  {
    if (i < 33)
    {
      int rx = rand() % 127;
      starx[i] = rx;
      stary[i]=-1;
    }
    else
    {
      starx[i] = 128;
      int ry = rand() % 63;
      stary[i] = ry;
    }
  }
arduboy.drawPixel(starx[i], stary[i],1);
}

// Draw Plannets
if (planetExist[2] == 1) // Earth
{
    if (scrollScreenReset == 0)
    {
    Sprites::drawExternalMask(planetx[2], planety[2], DitherEarth128, DitherEarth128Mask, 0,  0);
    }
    if (scrollScreenReset == 1)
    {
    planetx[2] = planetx[2] - 2;
    planety[2] = planety[2] + 1;
    Sprites::drawExternalMask(planetx[2], planety[2], DitherEarth128, DitherEarth128Mask, 0,  0);
    }
    if (scrollScreenReset == 2)
    {
    Sprites::drawExternalMask(planetx[2], planety[2], DitherEarth128, DitherEarth128Mask, 0,  0);
    }
     if (scrollScreenReset == 3)
    {
    planetx[2] = planetx[2] - 2;
    planety[2] = planety[2] + 1;
    Sprites::drawExternalMask(planetx[2], planety[2], DitherEarth128, DitherEarth128Mask, 0,  0);
    }
    if (scrollScreenReset == 4)
    {
    Sprites::drawExternalMask(planetx[2], planety[2], DitherEarth128, DitherEarth128Mask, 0,  0);
    }
    if (scrollScreenReset == 5)
    {
    planetx[2] = planetx[2] - 2;
    planety[2] = planety[2] + 1;
    Sprites::drawExternalMask(planetx[2], planety[2], DitherEarth128, DitherEarth128Mask, 0,  0);
    }
    if (scrollScreenReset == 6)
    {
    Sprites::drawExternalMask(planetx[2], planety[2], DitherEarth128, DitherEarth128Mask, 0,  0);
    }
    if (scrollScreenReset == 7)
    {
    planetx[2] = planetx[2] - 2;
    planety[2] = planety[2] + 1;
    Sprites::drawExternalMask(planetx[2], planety[2], DitherEarth128, DitherEarth128Mask, 0,  0);
    }
    if (scrollScreenReset == 8)
    {
    Sprites::drawExternalMask(planetx[2], planety[2], DitherEarth128, DitherEarth128Mask, 0,  0);
    }
    if (scrollScreenReset == 9)
    {
    planetx[2] = planetx[2] - 2;
    planety[2] = planety[2] + 1;
    Sprites::drawExternalMask(planetx[2], planety[2], DitherEarth128, DitherEarth128Mask, 0,  0);
    }
    if (scrollScreenReset == 10)
    {
    Sprites::drawExternalMask(planetx[2], planety[2], DitherEarth128, DitherEarth128Mask, 0,  0);
    }
}
if (planetx[2] < -120)
{
  planetExist[2] =0;
}

if (planetExist[3] == 1) // Jupiter
{
    if (scrollScreenReset == 0)
    {
    Sprites::drawExternalMask(planetx[3], planety[3], DJupiter64, Mask64, 0,  0);
    }
    if (scrollScreenReset == 1)
    {
    planetx[3] = planetx[3] - 2;
    planety[3] = planety[3] + 1;
    Sprites::drawExternalMask(planetx[3], planety[3], DJupiter64, Mask64, 0,  0);
    }
    if (scrollScreenReset == 2)
    {
    Sprites::drawExternalMask(planetx[3], planety[3], DJupiter64, Mask64, 0,  0);
    }
     if (scrollScreenReset == 3)
    {
    planetx[3] = planetx[3] - 2;
    planety[3] = planety[3] + 1;
    Sprites::drawExternalMask(planetx[3], planety[3], DJupiter64, Mask64, 0,  0);
    }
    if (scrollScreenReset == 4)
    {
    Sprites::drawExternalMask(planetx[3], planety[3], DJupiter64, Mask64, 0,  0);
    }
    if (scrollScreenReset == 5)
    {
    planetx[3] = planetx[3] - 2;
    planety[3] = planety[3] + 1;
    Sprites::drawExternalMask(planetx[3], planety[3], DJupiter64, Mask64, 0,  0);
    }
    if (scrollScreenReset == 6)
    {
    Sprites::drawExternalMask(planetx[3], planety[3], DJupiter64, Mask64, 0,  0);
    }
    if (scrollScreenReset == 7)
    {
    planetx[3] = planetx[3] - 2;
    planety[3] = planety[3] + 1;
    Sprites::drawExternalMask(planetx[3], planety[3], DJupiter64, Mask64, 0,  0);
    }
    if (scrollScreenReset == 8)
    {
    Sprites::drawExternalMask(planetx[3], planety[3], DJupiter64, Mask64, 0,  0);
    }
    if (scrollScreenReset == 9)
    {
    planetx[3] = planetx[3] - 2;
    planety[3] = planety[3] + 1;
    Sprites::drawExternalMask(planetx[3], planety[3], DJupiter64, Mask64, 0,  0);
    }
    if (scrollScreenReset == 10)
    {
    Sprites::drawExternalMask(planetx[3], planety[3], DJupiter64, Mask64, 0,  0);
    }
}
if (planetx[3] < -120)
{
  planetExist[3] =0;
}

if (planetExist[4] == 1) // Saturn
{
    if (scrollScreenReset == 0)
    {
    Sprites::drawExternalMask(planetx[4], planety[4], SaturnSmall, SaturnSmallMask, 0,  0);
    }
    if (scrollScreenReset == 1)
    {
    planetx[4] = planetx[4] - 2;
    planety[4] = planety[4] + 1;
    Sprites::drawExternalMask(planetx[4], planety[4], SaturnSmall, SaturnSmallMask, 0,  0);
    }
    if (scrollScreenReset == 2)
    {
    Sprites::drawExternalMask(planetx[4], planety[4], SaturnSmall, SaturnSmallMask, 0,  0);
    }
     if (scrollScreenReset == 3)
    {
    planetx[4] = planetx[4] - 2;
    planety[4] = planety[4] + 1;
    Sprites::drawExternalMask(planetx[4], planety[4], SaturnSmall, SaturnSmallMask, 0,  0);
    }
    if (scrollScreenReset == 4)
    {
    Sprites::drawExternalMask(planetx[4], planety[4], SaturnSmall, SaturnSmallMask, 0,  0);
    }
    if (scrollScreenReset == 5)
    {
    planetx[4] = planetx[4] - 2;
    planety[4] = planety[4] + 1;
    Sprites::drawExternalMask(planetx[4], planety[4], SaturnSmall, SaturnSmallMask, 0,  0);
    }
    if (scrollScreenReset == 6)
    {
    Sprites::drawExternalMask(planetx[4], planety[4], SaturnSmall, SaturnSmallMask, 0,  0);
    }
    if (scrollScreenReset == 7)
    {
    planetx[4] = planetx[4] - 2;
    planety[4] = planety[4] + 1;
    Sprites::drawExternalMask(planetx[4], planety[4], SaturnSmall, SaturnSmallMask, 0,  0);
    }
    if (scrollScreenReset == 8)
    {
    Sprites::drawExternalMask(planetx[4], planety[4], SaturnSmall, SaturnSmallMask, 0,  0);
    }
    if (scrollScreenReset == 9)
    {
    planetx[4] = planetx[4] - 2;
    planety[4] = planety[4] + 1;
    Sprites::drawExternalMask(planetx[4], planety[4], SaturnSmall, SaturnSmallMask, 0,  0);
    }
    if (scrollScreenReset == 10)
    {
    Sprites::drawExternalMask(planetx[4], planety[4], SaturnSmall, SaturnSmallMask, 0,  0);
    }
}
if (planetx[4] < -120)
{
  planetExist[4] = 0;
}

if (planetExist[1] == 1) // Moon
{
    planetx[1] = planetx[1] - 4;
    planety[1] = planety[1] + 2;
    Sprites::drawExternalMask(planetx[1], planety[1], DitherMoon64, Mask64, 0,  0);
}

if (planetx[1] < -60)
{
  planetExist[1] = 0;
}

// Draw Terrain
for (int xs = 126; xs > -20; xs=xs-10)
{
  scanx++;
  
  for (int rowx=0; rowx < 50; rowx=rowx+10)
  {
    z = ter[scanx][scany];

    if (scrollScreenReset == 1)
    {
    scrollScreenX = 2;
    scrollScreenY = 1;
    }
    if (scrollScreenReset == 2)
    {
    scrollScreenX = 4;
    scrollScreenY = 2;
    }
    if (scrollScreenReset == 3)
    {
    scrollScreenX = 6;
    scrollScreenY = 3;
    }
    if (scrollScreenReset == 4)
    {
    scrollScreenX = 8;
    scrollScreenY = 4;
    }
    if (scrollScreenReset == 5)
    {
    scrollScreenX = 10;
    scrollScreenY = 5;
    }
    if (scrollScreenReset == 6)
    {
    scrollScreenX = 12;
    scrollScreenY = 6;
    }
    if (scrollScreenReset == 7)
    {
    scrollScreenX = 14;
    scrollScreenY = 7;
    }
    if (scrollScreenReset == 8)
    {
    scrollScreenX = 16;
    scrollScreenY = 8;
    }
    if (scrollScreenReset == 9)
    {
    scrollScreenX = 18;
    scrollScreenY = 9;
    }

    int xoffset = xs+rowx-scrollScreenX-10;
    int yoffset = ys+rowy+scrollScreenY-5;

  if(z==0)
  {
 
  }
  else
  if(z==1)
  {
  Sprites::drawExternalMask(xoffset, yoffset, Block1, Block1Mask, 0,  0);
  }
  else
  if(z==2)
  {
  Sprites::drawExternalMask(xoffset, yoffset, Block1Alt, Block1Mask, 0,  0);
  }
  else
  if(z==3)
  {
  Sprites::drawExternalMask(xoffset, yoffset-1, Block2, Block2Mask, 0,  0);
  }
  else
  if(z==4)
  {
  Sprites::drawExternalMask(xoffset, yoffset-2, Block3, Block3Mask, 0,  0);
  }
  else
  if(z==5)
  {
  Sprites::drawExternalMask(xoffset, yoffset-3, Block4, Block4Mask, 0,  0);
  }
  else
  if(z==6)
  {
  Sprites::drawExternalMask(xoffset, yoffset-4, Block5, Block5Mask, 0,  0);
  }
  else
  if(z==7)
  {
  Sprites::drawExternalMask(xoffset, yoffset-5, Block6, Block6Mask, 0,  0);
  }
  else
  if(z==8)
  {
  Sprites::drawExternalMask(xoffset, yoffset-6, Block7, Block7Mask, 0,  0);
  }
  else
  if(z==9)
  {
  Sprites::drawExternalMask(xoffset, yoffset-7, Block8, Block8Mask, 0,  0);
  }
  else
  if(z==10)
  {
  Sprites::drawExternalMask(xoffset, yoffset-8, Block9, Block9Mask, 0,  0);
  }
  else
  if(z==11)
  {
  Sprites::drawExternalMask(xoffset, yoffset-9, Block10, Block10Mask, 0,  0);
  }
  else
  if(z==12)
  {
  Sprites::drawExternalMask(xoffset, yoffset-9, Block10Alt, Block10Mask, 0,  0);
  }
  rowy=rowy+5;
  scany++;
  }
rowy=0;
scany=1;
ys=ys+5;
} // END OF BLOCK DRAWING ++++++++++++++++++++++++++++++++++++++++++++++++++++++++

if (LIVES <= 0)
{
  playerDeath(); // Cycle to Death Animation
}

if (LIVES > 0)
{
Sprites::drawExternalMask(PSX, PSY+13-PlayerHeight, SHADDOW, SHADDOWMask, 0,  0);
}
scrollScreenReset++;
if (scrollScreenReset == 10)
{
  for (int x = 1; x < 16 ; x++)
  {
    for(int y = 1; y < 8 ; y++)
  {
    terNew[x+1][y] = ter[x][y];
    ter[x][y] = terNew[x][y];
  }
}
for(int y = 1; y < 8 ; y++)
  {
    int r = rand() % height;
    ter[1][y] = r;
  }
scrollScreenReset = 0;
}
scrollScreenX = 0;
scrollScreenY = 0;

// Draw UAPs
controlUAP();
//Move Bullets

    if (bulletexist[1] == 1)
    {
      bulletx[1] = bulletx[1] + 8;
      bullety[1] = bullety[1] - 4;

      if (bulletx[1] > 128)
      {
        bulletexist[1] = 0;
      }
      if (bullety[1] < 0)
      {
        bulletexist[1] = 0;
      }
    }

    if (bulletexist[2] == 1)
    {
      bulletx[2] = bulletx[2] + 8;
      bullety[2] = bullety[2] - 4;

      if (bulletx[2] > 128)
      {
        bulletexist[2] = 0;
      }
      if (bullety[2] < 0)
      {
        bulletexist[2] = 0;
      }
    }

    if (bulletexist[3] == 1)
    {
      bulletx[3] = bulletx[3] + 8;
      bullety[3] = bullety[3] - 4;

      if (bulletx[3] > 128)
      {
        bulletexist[3] = 0;
      }
      if (bullety[3] < 0)
      {
        bulletexist[3] = 0;
      }
    }

// Draw Bullets, Create Hitboxes, Check collisions

for (int i = 0; i < 4; i++)
{
  if (bulletexist[i] == 1)
  {
    Sprites::drawExternalMask(bulletx[i], bullety[i], darkenergy, darkenergyMask, 0,  0);
    if (i==1)
    {
      Rect bullet1(bulletx[i],bullety[i],8,8); // Create hitboxes
      if (UAPexist[1] == 1)
      {
        Rect UAPhitbox1(UAPx[1]+10,UAPy[1]+8,10,10);
        if (arduboy.collide(bullet1, UAPhitbox1))
        {
          SCORE = SCORE + 10;
          UAP1Die();
        }
      }

      if (UAPexist[2] == 1)
      {
        Rect UAPhitbox2(UAPx[2]+10,UAPy[2]+8,10,10);
        
        if (arduboy.collide(bullet1, UAPhitbox2))
        {
          SCORE = SCORE + 10;
          UAP2Die();
        }
      }

      if (UAPexist[3] == 1)
      {
        Rect UAPhitbox3(UAPx[3]+10,UAPy[3]+8,10,10);
        
        if (arduboy.collide(bullet1, UAPhitbox3))
        {
          SCORE = SCORE + 10;
          UAP3Die();
        }
      }
    }

    if (i==2)
    {
      Rect bullet2(bulletx[2],bullety[2],8,8);
      

      if (UAPexist[1] == 1)
      {
        Rect UAPhitbox1(UAPx[1]+10,UAPy[1]+8,10,10);
        
        if (arduboy.collide(bullet2, UAPhitbox1))
        {
          SCORE = SCORE + 10;
          UAP1Die();       
        }
      }

      if (UAPexist[2] == 1)
      {
        Rect UAPhitbox2(UAPx[2]+10,UAPy[2]+8,10,10);
        
        if (arduboy.collide(bullet2, UAPhitbox2))
        {
          SCORE = SCORE + 10;
          UAP2Die();
        }
      }

      if (UAPexist[3] == 1)
      {
        Rect UAPhitbox3(UAPx[3]+10,UAPy[3]+8,10,10);
        
        if (arduboy.collide(bullet2, UAPhitbox3))
        {
          SCORE = SCORE + 10;
          UAP3Die();
        }
      }
    }

    if (i==3)
    {
      Rect bullet3(bulletx[3],bullety[3],8,8);
      if (UAPexist[1] == 1)
      {
        Rect UAPhitbox1(UAPx[1]+10,UAPy[1]+8,10,10);
        if (arduboy.collide(bullet3, UAPhitbox1))
        {
          SCORE = SCORE + 10;
          UAP1Die();
        }
      }

      if (UAPexist[2] == 1)
      {
        Rect UAPhitbox2(UAPx[2]+10,UAPy[2]+8,10,10);
        
        if (arduboy.collide(bullet3, UAPhitbox2))
        {
          SCORE = SCORE + 10;
          UAP2Die();
        }
      }

      if (UAPexist[3] == 1)
      {
        Rect UAPhitbox3(UAPx[3]+10,UAPy[3]+8,10,10);
        
        if (arduboy.collide(bullet3, UAPhitbox3))
        {
          SCORE = SCORE + 10;
          UAP3Die();
        }
      }
    }



  }
}

for (int i = 0 ; i< 4 ; i ++) // Move UAPbullet and detect Collision with Ship
{

if (UAPbulletx[i] < 0)
{
  UAPbulletExist[i] =0;
}

    if (UAPbulletExist[i] == 1)
    {
      UAPbulletx[i] = UAPbulletx[i] - 4;
      UAPbullety[i] = UAPbullety[i] + 2;

      if ( animateCycle == 1)
      {
        Sprites::drawExternalMask(UAPbulletx[i], UAPbullety[i], UAPbullet1, UAPbulletMask, 0,  0);
      }
        if ( animateCycle == 2)
      {
        Sprites::drawExternalMask(UAPbulletx[i], UAPbullety[i], UAPbullet2, UAPbulletMask, 0,  0);
      }
        if ( animateCycle == 3)
        { 
          Sprites::drawExternalMask(UAPbulletx[i], UAPbullety[i], UAPbullet3, UAPbulletMask, 0,  0);
        }

        Rect PLAYERhitbox(PSX+4,PSY+4,12,12);

        Rect UAPbulletHitbox(UAPbulletx[i],UAPbullety[i],16,16);
        if (LIVES > 0)
        {
        if (arduboy.collide(PLAYERhitbox, UAPbulletHitbox))
        {
          UAPbulletExist[i] = 0;
          playerHit();
        }
        }
      }
    }
// Check for Ship collision / Draw shaddow and ship
if (LIVES > 0)
{
Rect PLAYERhitbox(PSX+4,PSY+4,12,12);
if (UAPexist[1] == 1)
{
  Rect UAPhitbox1(UAPx[1]+10,UAPy[1]+8,10,10);
  

  if (arduboy.collide(PLAYERhitbox, UAPhitbox1))
  {
    UAP1Die();
    playerHit();
  }
}

if (UAPexist[2] == 1)
{
  Rect UAPhitbox2(UAPx[2]+10,UAPy[2]+8,10,10);
  

  if (arduboy.collide(PLAYERhitbox, UAPhitbox2))
  {
    UAP2Die();
    playerHit();
  }
}

if (UAPexist[3] == 1)
{
  Rect UAPhitbox3(UAPx[3]+10,UAPy[3]+8,10,10);
  if (arduboy.collide(PLAYERhitbox, UAPhitbox3))
  {
  UAP3Die();
  playerHit();
  }
}

// HUD ------------------------------------------------------------------------------------------------------------------------
Sprites::drawExternalMask(0, 0, Computer, ComputerMask, 0,  0);
arduboy.setCursor(0,0);
int SCREEN = 9999 - LevelProgress;
arduboy.print (SCREEN);
Sprites::drawExternalMask(99, 50, Computer2, Computer2Mask, 0,  0);
arduboy.setCursor(105,52);
arduboy.print(SCORE);
int BAR = (LIVES/5);
arduboy.drawRect(106,60,22,4,1);
arduboy.fillRect(107,61,BAR,2,1);
}


if (Left == 0)
{
if (Right == 0)
{
if (LIVES > 0)
{
Sprites::drawExternalMask(PSX, PSY, Wedge, wedgeMask, 0,  0);
}
}
}
if (Left ==1)
{
if (LIVES > 0)
{
Sprites::drawExternalMask(PSX, PSY, WedgeLeft, WedgeLeftMask, 0,  0);
}
}
if (Right ==1)
{
if (LIVES > 0)
{
Sprites::drawExternalMask(PSX, PSY, WedgeRight, WedgeRightMask, 0,  0);
}
}

if ( animateCycle == 1)
{
if (LIVES > 0)
{
  Sprites::drawExternalMask(PSX-9, PSY+5, exhaust1, exhaust1Mask, 0,  0);
  }
}
if ( animateCycle == 2)
{
if (LIVES > 0)
{
  Sprites::drawExternalMask(PSX-9, PSY+5, exhaust2, exhaust2Mask, 0,  0);
  }
}
if ( animateCycle == 3)
{
if (LIVES > 0)
{
  Sprites::drawExternalMask(PSX-9, PSY+5, exhaust3, exhaust3Mask, 0,  0);
}
}

debrisAnim(); // Move DEBRIS
if (animateCycle == 3) /// Animate Cycle for 3 frame animations
{
  animateCycle = 0;
}
animateCycle++;

  arduboy.display(); /// Draw Screen ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  ys=-10; // reset Y Stard cords
  scanx=0; // reset x scan cords

int Rocky = rand() % 100; // Create varied "Rockyness"

//Initiate Level Events
// set down progressive terrain 
if (LevelProgress < 300) // *************** "height" is the range random blocks will be drawn from (1 (1 is empty) to 14) 3 and 14 are alt blocks?
{
  height = 1; // Stars
}

if (LevelProgress > 299)
{
    if (LevelProgress < 500)
  {
    if (Rocky < 30)
    {
      height = 3;
    }
  }
}

if (LevelProgress > 499)
{
  if (LevelProgress < 1000)
  {
  if (Rocky < 20)
  {
    height = 6;
  }
    if (Rocky > 19)
  {
    height = 3;
  }
  }
}

if (LevelProgress > 999)
{
  if (LevelProgress < 1100)
{
  height = 3;
}
}

if (LevelProgress > 1099)
{
  if (LevelProgress < 2000)
{
  if (Rocky < 40)
  {
    height = 14;
  }
    if (Rocky > 39)
  {
    height = 5;
  }
}
}

if (LevelProgress > 1999)
{
  if (LevelProgress < 2300)
{
  height = 3;
}
}

if (LevelProgress > 2299)
{
  if (LevelProgress < 2500)
{
  if (Rocky < 40)
  {
    height = 14;
  }
    if (Rocky > 39)
  {
    height = 7;
  }
}
}

if (LevelProgress > 2499)
{
  if (LevelProgress < 2700)
  {
    height = 14;
  }
}

if (LevelProgress > 2699)
{
  if (LevelProgress < 4000)
{
  if (Rocky < 20)
  {
    height = 5;
  }
    if (Rocky > 19)
  {
    height = 3;
  }
}
}

if (LevelProgress > 3999)
{
  if (LevelProgress < 5000)
{
  if (Rocky < 10)
  {
    height = 14;
  }
    if (Rocky > 9)
  {
    height = 3;
  }
}
}

if (LevelProgress > 4999)
{
  if (LevelProgress < 4200)
{
    height = 14;
}
}

if (LevelProgress > 4199)
{
  if (LevelProgress < 4500)
{
    height = 7;
}
}

if (LevelProgress > 4499)
{
  if (LevelProgress < 4700)
{
    height = 1;
}
}

if (LevelProgress > 4699)
{
  if (LevelProgress < 5000)
{
  if (Rocky < 40)
  {
    height = 4;
  }
    if (Rocky > 39)
  {
    height = 7;
  }
}
}

if (LevelProgress > 4999)
{
  if (LevelProgress < 6000)
{
    height = 1;
}
}

if (LevelProgress > 5999)
{
  if (LevelProgress < 6500)
  {
  if (Rocky < 20)
  {
    height = 6;
  }
    if (Rocky > 19)
  {
    height = 3;
  }
  }
}

if (LevelProgress > 6499)
{
  if (LevelProgress < 7100)
  {
  if (Rocky < 20)
  {
    height = 7;
  }
    if (Rocky > 19)
  {
    height = 14;
  }
  }
}

if (LevelProgress > 7099)
{
  
    height = 1;
  
}


// Spawn Planets

if (LevelProgress == 300) // Earth
{
  planetExist[2] = 1;
  planetx[2] = 130;
  planety[2] = -90;
}

if (LevelProgress == 450) // Moon
{
  planetExist[1] = 1;
  planetx[1] = 140;
  planety[1] = -70;
}

if (LevelProgress == 1000) // Jupiter
{
  planetExist[3] = 1;
  planetx[3] = 130;
  planety[3] = -75;
}

if (LevelProgress == 2000) // Moon
{
  planetExist[1] = 1;
  planetx[1] = 140;
  planety[1] = -25;
}

if (LevelProgress == 3000) // Saturn
{
  planetExist[4] = 1;
  planetx[4] = 130;
  planety[4] = -70;
}

if (LevelProgress == 5500) // Saturn
{
  planetExist[4] = 1;
  planetx[4] = 130;
  planety[4] = -50;
}

if (LevelProgress == 7000) // Jupiter
{
  planetExist[3] = 1;
  planetx[3] = 130;
  planety[3] = -80;
}

if (LevelProgress == 9000) // Earth
{
  planetExist[2] = 1;
  planetx[2] = 130;
  planety[2] = -90;
}

if (LevelProgress == 9150) // Moon
{
  planetExist[1] = 1;
  planetx[1] = 140;
  planety[1] = -70;
}

// Spawn UAPs *****************************
int r = rand() % 2000; // Rate at which UAPs Spawn

if (r < 100)
{
spawnUAP();
}

//Win Game *****************************
if (LevelProgress == 9999)
{
  win();
}

if (scrollScreenReset==0)
{
// Scroll playscreen ***********************************************
for (int x = 1; x < 16 ; x++)
{
  for(int y = 1; y < 8 ; y++)
  {
  terNew[x+1][y] = ter[x][y];
  ter[x][y] = terNew[x][y];
  }
}
  for(int y = 1; y < 8 ; y++)
  {
    int r = rand() % height; // Blocks up to 14 ?? +1
    ter[1][y] = r;
  }
}
  LevelProgress++;

  arduboy.clear();
}

// ######################### End of Main Loop #########################################
void controlUAP() // Allocate to pattern, Kill UAP, Draw UAP
{

// Randomly reassighn patterns
if (UAPexist[1] == 1)
{
  int f = rand() % 50;
  if (f == 25)
  {
    int r = rand() % 4 + 1;
    UAPpattern[1] = r;
  }
}

if (UAPexist[2] == 1)
{
  int f = rand() % 50;
  if (f == 25)
  {
    int r = rand() % 4 + 1;
    UAPpattern[2] = r;
  }
}

if (UAPexist[3] == 1)
{
  int f = rand() % 50;
  if (f == 25)
  {
    int r = rand() % 4 + 1;
    UAPpattern[3] = r;
  }
}


patternUAP();

if (UAPx[1] < -30)
  {
    UAPexist[1] = 0;
  }
  else
{
  if (UAPexist[1] == 1)
  {
    Sprites::drawExternalMask(UAPx[1], UAPy[1], UAP, UAPMask, 0,  0);

    int r = rand() % 250; // Randomly initiate Enemy bullets
    {
      if (r < 5)
      {
        if (UAPbulletExist[1] == 0)// if bullet does not exist create bullet corosponding to activeUAP
        {
          UAPbulletExist[1] = 1;
          UAPbulletx[1] = UAPx[1];
          UAPbullety[1] = UAPy[1]+7;
        }
      }
    }
  }
}

  if (UAPx[2] < -30)
  {
    UAPexist[2] = 0;
  }
  else
  {
  if (UAPexist[2] == 1)
  {
    Sprites::drawExternalMask(UAPx[2], UAPy[2], UAP, UAPMask, 0,  0);

    int r = rand() % 250; // Randomly initiate Enemy bullets
    {
      if (r < 5)
      {
        if (UAPbulletExist[2] == 0)// if bullet does not exist create bullet corosponding to activeUAP
        {
          UAPbulletExist[2] = 1;
          UAPbulletx[2] = UAPx[2];
          UAPbullety[2] = UAPy[2]+7;
        }
      }
    }
  }
    
}

  if (UAPx[3] < -30)
  {
    UAPexist[3] = 0;
  }
  else
  {
  if (UAPexist[3] == 1)
  {
    Sprites::drawExternalMask(UAPx[3], UAPy[3], UAP, UAPMask, 0,  0);

    int r = rand() % 250; // Randomly initiate Enemy bullets
    {
      if (r < 5)
      {
        if (UAPbulletExist[3] == 0)// if bullet does not exist create bullet corosponding to activeUAP
        {
          UAPbulletExist[3] = 1;
          UAPbulletx[3] = UAPx[3];
          UAPbullety[3] = UAPy[3]+7;
        }
      }
    }
  }   
  }
}

void patternUAP() // Chose Movement Pattern
{
  if (UAPpattern[1] == 1) 
  {
    pattern1UAP();
  }
  if (UAPpattern[1] == 2) 
  {
    pattern2UAP();
  }
  if (UAPpattern[1] == 3) 
  {
    pattern3UAP();
  }
  if (UAPpattern[1] == 4) 
  {
    pattern4UAP();
  }

  if (UAPpattern[2] == 1) 
  {
    pattern1UAP();
  }
  if (UAPpattern[2] == 2) 
  {
    pattern2UAP();
  }
  if (UAPpattern[2] == 3) 
  {
    pattern3UAP();
  }  
    if (UAPpattern[2] == 4) 
  {
    pattern4UAP();
  }  

  if (UAPpattern[3] == 1) 
  {
    pattern1UAP();
  }
  if (UAPpattern[3] == 2) 
  {
    pattern2UAP();
  }
  if (UAPpattern[3] == 3) 
  {
    pattern3UAP();
  }

  if (UAPpattern[3] == 4) 
  {
    pattern4UAP();
  }
}

void pattern1UAP() /// UAPpattern Movement Sequence 1
{

if (UAPexist[1]==1)
{
  if (UAPpattern[1]==1)
  {
    if (scrollScreenReset == 1) // Scroll slower than screen
    {
    UAPx[1] = UAPx[1] - 2;
    UAPy[1] = UAPy[1] + 1;
    }
     if (scrollScreenReset == 3)
    {
    UAPx[1] = UAPx[1] - 2;
    UAPy[1] = UAPy[1] + 1;
    }
    if (scrollScreenReset == 5)
    {
    UAPx[1] = UAPx[1] - 2;
    UAPy[1] = UAPy[1] + 1;
    }
    if (scrollScreenReset == 7)
    {
    UAPx[1] = UAPx[1] - 2;
    UAPy[1] = UAPy[1] + 1;
    }
    if (scrollScreenReset == 9)
    {
    UAPx[1] = UAPx[1] - 2;
    UAPy[1] = UAPy[1] + 1;
    }
    }
}

if (UAPexist[2]==1)
{
if (UAPpattern[2]==1)
{
if (scrollScreenReset == 1)
    {
    UAPx[2] = UAPx[2] - 2;
    UAPy[2] = UAPy[2] + 1;
    }
     if (scrollScreenReset == 3)
    {
    UAPx[2] = UAPx[2] - 2;
    UAPy[2] = UAPy[2] + 1;
    }
    if (scrollScreenReset == 5)
    {
    UAPx[2] = UAPx[2] - 2;
    UAPy[2] = UAPy[2] + 1;
    }
    if (scrollScreenReset == 7)
    {
    UAPx[2] = UAPx[2] - 2;
    UAPy[2] = UAPy[2] + 1;
    }
    if (scrollScreenReset == 9)
    {
    UAPx[2] = UAPx[2] - 2;
    UAPy[2] = UAPy[2] + 1;
    }
    }
}

if (UAPexist[3]==1)
{
  if (UAPpattern[3]==1)
  {
    if (scrollScreenReset == 1)
    {
    UAPx[3] = UAPx[3] - 2;
    UAPy[3] = UAPy[3] + 1;
    }
     if (scrollScreenReset == 3)
    {
    UAPx[3] = UAPx[3] - 2;
    UAPy[3] = UAPy[3] + 1;
    }
    if (scrollScreenReset == 5)
    {
    UAPx[3] = UAPx[3] - 2;
    UAPy[3] = UAPy[3] + 1;
    }
    if (scrollScreenReset == 7)
    {
    UAPx[3] = UAPx[3] - 2;
    UAPy[3] = UAPy[3] + 1;
    }
    if (scrollScreenReset == 9)
    {
    UAPx[3] = UAPx[3] - 2;
    UAPy[3] = UAPy[3] + 1;
    }
    }
}
}

void pattern2UAP() /// UAPpattern Movement Sequence 2
{

if (UAPexist[1]==1)
{
  if (UAPpattern[1]==2)
{
UAPx[1] = UAPx[1] - 1;
UAPy[1] = UAPy[1] + 1;
}
}

if (UAPexist[2]==1)
{
if (UAPpattern[2]==2)
{
UAPx[2] = UAPx[2] - 1;
UAPy[2] = UAPy[2] + 1;
}
}

if (UAPexist[3]==1)
{
  if (UAPpattern[3]==2)
  {
UAPx[3] = UAPx[3] - 1;
UAPy[3] = UAPy[3] + 1;
  }
}
}

void pattern3UAP() // Pattern 3
{

if (UAPexist[1]==1)
{
  if (UAPpattern[1]==3)
{
UAPx[1] = UAPx[1] - 2;
UAPy[1] = UAPy[1] + 1;
}
}

if (UAPexist[2]==1)
{
if (UAPpattern[2]==3)
{
UAPx[2] = UAPx[2] - 2;
UAPy[2] = UAPy[2] + 1;
}
}

if (UAPexist[3]==1)
{
  if (UAPpattern[3]==3)
  {
UAPx[3] = UAPx[3] - 2;
UAPy[3] = UAPy[3] + 1;
  }
}
}

void pattern4UAP() // UAP Pattern 4
{

if (UAPexist[1]==1)
{
  if (UAPpattern[1]==4)
{
UAPx[1] = UAPx[1] - 2;
UAPy[1] = UAPy[1] - 2;
}
}

if (UAPexist[2]==1)
{
if (UAPpattern[2]==4)
{
UAPx[2] = UAPx[2] - 2;
UAPy[2] = UAPy[2] - 2;
}
}

if (UAPexist[3]==1)
{
  if (UAPpattern[3]==4)
  {
UAPx[3] = UAPx[3] - 2;
UAPy[3] = UAPy[3] - 2;
  }
}
}

void UAP1Die()
{
  debrisExist[1] = 1;
  debrisExist[2] = 1;
  debrisExist[3] = 1;
  for (int i = 1 ; i < 4 ; i ++)
  {
  debrisx[i] = UAPx[1];
  debrisy[i] = UAPy[1];
  }
  if (s == 1)
  {
  sound.tone(NOTE_C1,50);
  }
  UAPexist[1] = 0;
}

void UAP2Die()
{
  debrisExist[4] = 1;
  debrisExist[5] = 1;
  debrisExist[6] = 1;
  for (int i = 4 ; i < 7 ; i ++)
  {
  debrisx[i] = UAPx[2];
  debrisy[i] = UAPy[2];
  }
  if (s == 1)
  {
  sound.tone(NOTE_C1,50);
  }
  UAPexist[2] = 0;
}

void UAP3Die()
{
  debrisExist[7] = 1;
  debrisExist[8] = 1;
  debrisExist[9] = 1;

  for (int i = 7 ; i < 10 ; i ++)
  {
  debrisx[i] = UAPx[3];
  debrisy[i] = UAPy[3];
  }
  if (s == 1)
  {
  sound.tone(NOTE_C1,50);
  }
  UAPexist[3] = 0;
}

void win()
{
arduboy.clear();
arduboy.display();
arduboy.delayShort(500);
// Position Earth
planetx[2] = 0;
planety[2] = 70;
// Position Moon
planetx[1] = 60;
planety[1] = 170;
for (int i = 1; i < 75; i++) // resposition stars for win screen
{
  int rx = rand() % 127;
  starx[i] = rx;
  int ry = rand() % 63;
  stary[i] = ry;
} 
for (int c = 1; c < 180; c++) // Win screen loop
{
  arduboy.clear();
  for (int i = 1; i < 75; i++) // Move and Draw Stars for win screen
  {
    if (staroe[i] == 0)
    {
    stary[i] = stary[i] - 1;
    }
    else
    {
    stary[i] = stary[i] - 2;
    }
    if (stary[i] < 0)
    {
      int rx = rand() % 127;
      starx[i] = rx;
      stary[i] = 64;
    }
arduboy.drawPixel(starx[i], stary[i],1);
}
planety[2] = planety[2] - 1; // Scroll Earth
planety[1] = planety[1] - 2; // Scroll Moon
Sprites::drawExternalMask(planetx[2], planety[2], DitherEarth128, DitherEarth128Mask, 0,  0);
Sprites::drawExternalMask(planetx[1], planety[1], DitherMoon64, Mask64, 0,  0);
arduboy.setCursor(5,5);
arduboy.print("Outstanding Soldier!");
arduboy.setCursor(6,20);
arduboy.print("You saved the Earth");
arduboy.setCursor(40,45);
arduboy.print(" SCORE ");
arduboy.setCursor(80,45);
arduboy.print(SCORE);
arduboy.display();
arduboy.delayShort(100);
}
ResetLevel();
} // END OF WIN SCREEN

void playerHit()
{
if (s == 1)
{
sound.tone(NOTE_D7,30);
}
LIVES=LIVES-1;

if (LIVES == 0)
if (s == 1)
{
sound.tone(NOTE_D1,300);
}

{
  for (int i = 1 ; i < 10 ; i ++)
  {
  debrisx[i] = PSX;
  debrisy[i] = PSY;
  debrisExist[i] = 0; // clear existing debris
  }
}
}

void playerDeath()
{
deathAnim++;

debrisx[1] = debrisx[1] + 6;
debrisy[1] = debrisy[1] -5;
Sprites::drawExternalMask(debrisx[1], debrisy[1], fragment, fragmentMask, 0,  0);
debrisx[2] = debrisx[2] + 1;
debrisy[2] = debrisy[2] - 1;
Sprites::drawExternalMask(debrisx[2], debrisy[2], fragment, fragmentMask, 0,  0);
debrisx[3] = debrisx[3] - 1;
debrisy[3] = debrisy[3] + 1;
Sprites::drawExternalMask(debrisx[3], debrisy[3], fragment, fragmentMask, 0,  0);
debrisx[4] = debrisx[4] + 4;
debrisy[4] = debrisy[4] - 4;
Sprites::drawExternalMask(debrisx[4], debrisy[4], fragment, fragmentMask, 0,  0);
//debrisx[5] = debrisx[5] - 2;
debrisy[5] = debrisy[5] + 2;
Sprites::drawExternalMask(debrisx[5], debrisy[5], fragment, fragmentMask, 0,  0);
//debrisx[6] = debrisx[6] - 2;
debrisy[6] = debrisy[6] - 2;
Sprites::drawExternalMask(debrisx[6], debrisy[6], fragment, fragmentMask, 0,  0);
debrisx[7] = debrisx[7] + 2;
debrisy[7] = debrisy[7] -1;
Sprites::drawExternalMask(debrisx[7], debrisy[7], fragment, fragmentMask, 0,  0);
debrisx[8] = debrisx[8] + 5;
debrisy[8] = debrisy[8] - 3;
Sprites::drawExternalMask(debrisx[8], debrisy[8], fragment, fragmentMask, 0,  0);
debrisx[9] = debrisx[9] + 4;
debrisy[9] = debrisy[9] - 2;
Sprites::drawExternalMask(debrisx[9], debrisy[9], fragment, fragmentMask, 0,  0);
arduboy.display();

if (deathAnim > 75)
{
  playerDead();
}
}

void playerDead()
{
arduboy.clear();
arduboy.display();
arduboy.delayShort(500);
for (int i = 1; i < 75; i++) // resposition stars for die screen
{
  int rx = rand() % 127;
  starx[i] = rx;
  int ry = rand() % 63;
  stary[i] = ry;
}
// Position Jupiter
planetx[2] = -50;
// Position Saturn
planetx[1] = -60;

for (int c = 1; c < 180; c++) // Die screen loop
{
  arduboy.clear();
  for (int i = 1; i < 75; i++) // Move and Draw Stars for Die screen
  {
    if (staroe[i] == 0)
    {
    starx[i] = starx[i] + 1;
    }
    else
    {
    starx[i] = starx[i] + 2;
    }
    if (starx[i] > 128)
    {
      int ry = rand() % 64;
      starx[i] = 0;
      stary[i] = ry;
    }
  arduboy.drawPixel(starx[i], stary[i],1);
}
planetx[3] = planetx[3] + 1; // Scroll Earth
planetx[4] = planetx[4] + 2; // Scroll Moon
Sprites::drawExternalMask(planetx[3], 0, DJupiter64, Mask64, 0,  0);
Sprites::drawExternalMask(planetx[4], 0, SaturnSmall, SaturnSmallMask, 0,  0);
arduboy.setCursor(36,30);
arduboy.print(" GAME OVER ");
arduboy.setCursor(38,45);
arduboy.print(" SCORE ");
arduboy.setCursor(80,45);
arduboy.print(SCORE);
arduboy.display();
arduboy.delayShort(100);
}
ResetLevel();
}

void spawnUAP()
{
  if (UAPexist[1] == 0)
  {
    int ry = rand() % 50;
    UAPexist[1] = 1;
    int r = rand() % 4 + 1;
    UAPpattern[1] = r;
    UAPx[1] = 128;
    UAPy[1] = ry-48;
  }

  if (UAPexist[2] == 0)
  {
    int ry = rand() % 50;
    UAPexist[2] = 1;
    int r = rand() % 4 + 1;
    UAPpattern[2] = r;
    UAPx[2] = 128;
    UAPy[2] = ry-48;
  }

  if (UAPexist[3] == 0)
  {
    int ry = rand() % 50;
    UAPexist[3] = 1;
    int r = rand() % 4 + 1;
    UAPpattern[3] = r;
    UAPx[3] = 128;
    UAPy[3] = ry-48;
  }
}

void fire()
{
  if (bulletexist[1] == 0)
  {
      bulletexist[1] = 1;
      bulletx[1] = PSX+8;
      bullety[1] = PSY;
      if (s == 1)
      {
      sound.tone(NOTE_E5,7);
      }
  }
  if (bulletexist[2] == 0)
  {
    if (bulletdelay > 2)
    {
      if (bulletdelay < 4)
    {
      bulletexist[2] = 1;
      bulletx[2] = PSX+8;
      bullety[2] = PSY;
      if (s == 1)
      {
      sound.tone(NOTE_F5,7);
      }
    }
    }
  }
    if (bulletexist[3] == 0)
    {
    if (bulletdelay > 5)
    {
      {
      bulletexist[3] = 1;
      bulletx[3] = PSX+8;
      bullety[3] = PSY;
      if (s == 1)
      { 
      sound.tone(NOTE_G5,7);
      }
      }
    }
    }
    }

void debrisAnim()
{
if (debrisExist[1] == 1);
{
debrisx[1] = debrisx[1] - 4;
debrisy[1] = debrisy[1] + 2;
Sprites::drawExternalMask(debrisx[1], debrisy[1], fragment, fragmentMask, 0,  0);
}
if (debrisExist[2] == 1);
{
debrisx[2] = debrisx[2] - 5;
debrisy[2] = debrisy[2] + 1;
Sprites::drawExternalMask(debrisx[2], debrisy[2], fragment, fragmentMask, 0,  0);
}
if (debrisExist[3] == 1);
{
debrisx[3] = debrisx[3] - 2;
debrisy[3] = debrisy[3] + 5;
Sprites::drawExternalMask(debrisx[3], debrisy[3], fragment, fragmentMask, 0,  0);
}

if (debrisExist[4] == 1);
{
debrisx[4] = debrisx[4] - 4;
debrisy[4] = debrisy[4] + 2;
Sprites::drawExternalMask(debrisx[4], debrisy[4], fragment, fragmentMask, 0,  0);
}
if (debrisExist[5] == 1);
{
debrisx[5] = debrisx[5] - 5;
debrisy[5] = debrisy[5] + 1;
Sprites::drawExternalMask(debrisx[5], debrisy[5], fragment, fragmentMask, 0,  0);
}
if (debrisExist[6] == 1);
{
debrisx[6] = debrisx[6] - 2;
debrisy[6] = debrisy[6] + 5;
Sprites::drawExternalMask(debrisx[6], debrisy[6], fragment, fragmentMask, 0,  0);
}

if (debrisExist[7] == 1);
{
debrisx[7] = debrisx[7] - 4;
debrisy[7] = debrisy[7] + 2;
Sprites::drawExternalMask(debrisx[1], debrisy[1], fragment, fragmentMask, 0,  0);
}

if (debrisExist[8] == 1);
{
debrisx[8] = debrisx[8] - 5;
debrisy[8] = debrisy[8] + 1;
Sprites::drawExternalMask(debrisx[2], debrisy[2], fragment, fragmentMask, 0,  0);
}
if (debrisExist[9] == 1);
{
debrisx[9] = debrisx[9] - 2;
debrisy[9] = debrisy[9] + 5;
Sprites::drawExternalMask(debrisx[3], debrisy[3], fragment, fragmentMask, 0,  0);
}

for (int i = 1 ; i < 4; i++) // deactivate out of bounds debris
{
  if (debrisx[i] > 160)
  {
    debrisExist[i] = 0;
  }
    if (debrisx[i] < -30)
  {
    debrisExist[i] = 0;
  }
    if (debrisy[i] > 90)
  {
    debrisExist[i] = -30;
  }
    if (debrisx[i] < 0)
  {
  debrisExist[i] = 0;
  }
}

for (int i = 4 ; i < 7; i++)
{
  if (debrisx[i] > 160)
  {
    debrisExist[i] = 0;
  }
    if (debrisx[i] < -30)
  {
    debrisExist[i] = 0;
  }
    if (debrisy[i] > 90)
  {
    debrisExist[i] = -30;
  }
    if (debrisx[i] < 0)
  {
  debrisExist[i] = 0;
  }
}

for (int i = 7 ; i < 10; i++)
{
  if (debrisx[i] > 160)
  {
    debrisExist[i] = 0;
  }
    if (debrisx[i] < -30)
  {
    debrisExist[i] = 0;
  }
    if (debrisy[i] > 90)
  {
    debrisExist[i] = -30;
  }
    if (debrisx[i] < 0)
  {
  debrisExist[i] = 0;
  }
}
}

void ResetLevel()
{
for (int x = 1; x < 16 ; x++) // Wipe Terrain for new game
{
  for(int y = 1; y < 8 ; y++)
  {
  terNew[x][y] = 0;
  ter[x][y] = 0;
  }
}

for (int i = 1 ; i < 10 ; i++)
{
  debrisExist[i] = 0;
}

for (int i = 1 ; i < 4 ; i++)
{
UAPexist[i] = 0;
bulletexist[i] = 0;
UAPbulletExist[i] = 0;
planetExist[i] = 0;
}

start=false;
}